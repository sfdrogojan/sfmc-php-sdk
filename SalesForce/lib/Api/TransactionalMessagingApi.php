<?php
/**
 * TransactionalMessagingApi
 * PHP version 5
 *
 * @category Class
 * @package  SalesForce\MarketingCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing Cloud REST API
 *
 * Marketing Cloud's REST API is our newest API. It supports multi-channel use cases, is much more lightweight and easy to use than our SOAP API, and is getting more comprehensive with every release.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mc_sdk@salesforce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.7
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SalesForce\MarketingCloud\Api;

use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use SalesForce\MarketingCloud\ApiException;
use SalesForce\MarketingCloud\ObjectSerializer;

/**
 * TransactionalMessagingApi Class Doc Comment
 *
 * @category Class
 * @package  SalesForce\MarketingCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransactionalMessagingApi extends AbstractApi
{

    /**
     * Operation createEmailDefinition
     *
     * createEmailDefinition
     *
     * @param  \SalesForce\MarketingCloud\Model\CreateEmailDefinitionRequest $body JSON Parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     * @return \SalesForce\MarketingCloud\Model\CreateEmailDefinitionRequest
     */
    public function createEmailDefinition($body = null)
    {
        list($response) = $this->createEmailDefinitionWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createEmailDefinitionWithHttpInfo
     *
     * createEmailDefinition
     *
     * @param  \SalesForce\MarketingCloud\Model\CreateEmailDefinitionRequest $body JSON Parameters (optional)
     *
     * @return array of \SalesForce\MarketingCloud\Model\CreateEmailDefinitionRequest, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     */
    public function createEmailDefinitionWithHttpInfo($body = null)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\CreateEmailDefinitionRequest';
        $request = $this->createEmailDefinitionRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                /** @var \GuzzleHttp\Psr7\Response $response */
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = \GuzzleHttp\json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\CreateEmailDefinitionRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createEmailDefinitionAsync
     *
     * createEmailDefinition
     *
     * @param  \SalesForce\MarketingCloud\Model\CreateEmailDefinitionRequest $body JSON Parameters (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     */
    public function createEmailDefinitionAsync($body = null)
    {
        return $this->createEmailDefinitionAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createEmailDefinitionAsyncWithHttpInfo
     *
     * createEmailDefinition
     *
     * @param  \SalesForce\MarketingCloud\Model\CreateEmailDefinitionRequest $body JSON Parameters (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws Exception\ClientUnauthorizedException
     * @throws \InvalidArgumentException
     */
    public function createEmailDefinitionAsyncWithHttpInfo($body = null)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\CreateEmailDefinitionRequest';
        $request = $this->createEmailDefinitionRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = \GuzzleHttp\json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    /** @var \GuzzleHttp\Exception\RequestException $exception */
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createEmailDefinition'
     *
     * @param  \SalesForce\MarketingCloud\Model\CreateEmailDefinitionRequest $body JSON Parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createEmailDefinitionRequest($body = null)
    {
        $this->authorizeClient();


        $resourcePath = '/messaging/v1/email/definitions/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        // Set the header for the authorization access token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $headers['User-Agent'] = static::getUserAgent();

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSmsDefinition
     *
     * createSmsDefinition
     *
     * @param  \SalesForce\MarketingCloud\Model\CreateSmsDefinitionRequest $body JSON Parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     * @return \SalesForce\MarketingCloud\Model\CreateSmsDefinitionRequest
     */
    public function createSmsDefinition($body = null)
    {
        list($response) = $this->createSmsDefinitionWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createSmsDefinitionWithHttpInfo
     *
     * createSmsDefinition
     *
     * @param  \SalesForce\MarketingCloud\Model\CreateSmsDefinitionRequest $body JSON Parameters (optional)
     *
     * @return array of \SalesForce\MarketingCloud\Model\CreateSmsDefinitionRequest, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     */
    public function createSmsDefinitionWithHttpInfo($body = null)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\CreateSmsDefinitionRequest';
        $request = $this->createSmsDefinitionRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                /** @var \GuzzleHttp\Psr7\Response $response */
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = \GuzzleHttp\json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\CreateSmsDefinitionRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createSmsDefinitionAsync
     *
     * createSmsDefinition
     *
     * @param  \SalesForce\MarketingCloud\Model\CreateSmsDefinitionRequest $body JSON Parameters (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     */
    public function createSmsDefinitionAsync($body = null)
    {
        return $this->createSmsDefinitionAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSmsDefinitionAsyncWithHttpInfo
     *
     * createSmsDefinition
     *
     * @param  \SalesForce\MarketingCloud\Model\CreateSmsDefinitionRequest $body JSON Parameters (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws Exception\ClientUnauthorizedException
     * @throws \InvalidArgumentException
     */
    public function createSmsDefinitionAsyncWithHttpInfo($body = null)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\CreateSmsDefinitionRequest';
        $request = $this->createSmsDefinitionRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = \GuzzleHttp\json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    /** @var \GuzzleHttp\Exception\RequestException $exception */
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSmsDefinition'
     *
     * @param  \SalesForce\MarketingCloud\Model\CreateSmsDefinitionRequest $body JSON Parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createSmsDefinitionRequest($body = null)
    {
        $this->authorizeClient();


        $resourcePath = '/messaging/v1/sms/definitions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        // Set the header for the authorization access token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $headers['User-Agent'] = static::getUserAgent();

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEmailDefinition
     *
     * deleteEmailDefinition
     *
     * @param  string $definitionKey Unique identifier of the definition to delete (required)
     *
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     * @return \SalesForce\MarketingCloud\Model\DeleteSendDefinitionResponse
     */
    public function deleteEmailDefinition($definitionKey)
    {
        list($response) = $this->deleteEmailDefinitionWithHttpInfo($definitionKey);
        return $response;
    }

    /**
     * Operation deleteEmailDefinitionWithHttpInfo
     *
     * deleteEmailDefinition
     *
     * @param  string $definitionKey Unique identifier of the definition to delete (required)
     *
     * @return array of \SalesForce\MarketingCloud\Model\DeleteSendDefinitionResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     */
    public function deleteEmailDefinitionWithHttpInfo($definitionKey)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\DeleteSendDefinitionResponse';
        $request = $this->deleteEmailDefinitionRequest($definitionKey);

        try {
            $options = $this->createHttpClientOption();
            try {
                /** @var \GuzzleHttp\Psr7\Response $response */
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = \GuzzleHttp\json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\DeleteSendDefinitionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEmailDefinitionAsync
     *
     * deleteEmailDefinition
     *
     * @param  string $definitionKey Unique identifier of the definition to delete (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     */
    public function deleteEmailDefinitionAsync($definitionKey)
    {
        return $this->deleteEmailDefinitionAsyncWithHttpInfo($definitionKey)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEmailDefinitionAsyncWithHttpInfo
     *
     * deleteEmailDefinition
     *
     * @param  string $definitionKey Unique identifier of the definition to delete (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws Exception\ClientUnauthorizedException
     * @throws \InvalidArgumentException
     */
    public function deleteEmailDefinitionAsyncWithHttpInfo($definitionKey)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\DeleteSendDefinitionResponse';
        $request = $this->deleteEmailDefinitionRequest($definitionKey);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = \GuzzleHttp\json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    /** @var \GuzzleHttp\Exception\RequestException $exception */
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEmailDefinition'
     *
     * @param  string $definitionKey Unique identifier of the definition to delete (required)
     *
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEmailDefinitionRequest($definitionKey)
    {
        $this->authorizeClient();

        // verify the required parameter 'definitionKey' is set
        if ($definitionKey === null || (is_array($definitionKey) && count($definitionKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $definitionKey when calling deleteEmailDefinition'
            );
        }

        $resourcePath = '/messaging/v1/email/definitions/{definitionKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($definitionKey !== null) {
            $resourcePath = str_replace(
                '{' . 'definitionKey' . '}',
                ObjectSerializer::toPathValue($definitionKey),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        // Set the header for the authorization access token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $headers['User-Agent'] = static::getUserAgent();

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteQueuedMessagesForEmailDefinition
     *
     * deleteQueuedMessagesForEmailDefinition
     *
     * @param  string $definitionKey Unique identifier of the email definition (required)
     *
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     * @return \SalesForce\MarketingCloud\Model\DeleteQueuedMessagesForSendDefinitionResponse
     */
    public function deleteQueuedMessagesForEmailDefinition($definitionKey)
    {
        list($response) = $this->deleteQueuedMessagesForEmailDefinitionWithHttpInfo($definitionKey);
        return $response;
    }

    /**
     * Operation deleteQueuedMessagesForEmailDefinitionWithHttpInfo
     *
     * deleteQueuedMessagesForEmailDefinition
     *
     * @param  string $definitionKey Unique identifier of the email definition (required)
     *
     * @return array of \SalesForce\MarketingCloud\Model\DeleteQueuedMessagesForSendDefinitionResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     */
    public function deleteQueuedMessagesForEmailDefinitionWithHttpInfo($definitionKey)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\DeleteQueuedMessagesForSendDefinitionResponse';
        $request = $this->deleteQueuedMessagesForEmailDefinitionRequest($definitionKey);

        try {
            $options = $this->createHttpClientOption();
            try {
                /** @var \GuzzleHttp\Psr7\Response $response */
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = \GuzzleHttp\json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\DeleteQueuedMessagesForSendDefinitionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteQueuedMessagesForEmailDefinitionAsync
     *
     * deleteQueuedMessagesForEmailDefinition
     *
     * @param  string $definitionKey Unique identifier of the email definition (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     */
    public function deleteQueuedMessagesForEmailDefinitionAsync($definitionKey)
    {
        return $this->deleteQueuedMessagesForEmailDefinitionAsyncWithHttpInfo($definitionKey)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteQueuedMessagesForEmailDefinitionAsyncWithHttpInfo
     *
     * deleteQueuedMessagesForEmailDefinition
     *
     * @param  string $definitionKey Unique identifier of the email definition (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws Exception\ClientUnauthorizedException
     * @throws \InvalidArgumentException
     */
    public function deleteQueuedMessagesForEmailDefinitionAsyncWithHttpInfo($definitionKey)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\DeleteQueuedMessagesForSendDefinitionResponse';
        $request = $this->deleteQueuedMessagesForEmailDefinitionRequest($definitionKey);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = \GuzzleHttp\json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    /** @var \GuzzleHttp\Exception\RequestException $exception */
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteQueuedMessagesForEmailDefinition'
     *
     * @param  string $definitionKey Unique identifier of the email definition (required)
     *
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteQueuedMessagesForEmailDefinitionRequest($definitionKey)
    {
        $this->authorizeClient();

        // verify the required parameter 'definitionKey' is set
        if ($definitionKey === null || (is_array($definitionKey) && count($definitionKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $definitionKey when calling deleteQueuedMessagesForEmailDefinition'
            );
        }

        $resourcePath = '/messaging/v1/email/definitions/{definitionKey}/queue';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($definitionKey !== null) {
            $resourcePath = str_replace(
                '{' . 'definitionKey' . '}',
                ObjectSerializer::toPathValue($definitionKey),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        // Set the header for the authorization access token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $headers['User-Agent'] = static::getUserAgent();

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteQueuedMessagesForSmsDefinition
     *
     * deleteQueuedMessagesForSmsDefinition
     *
     * @param  string $definitionKey Unique identifier of the SMS definition (required)
     *
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     * @return \SalesForce\MarketingCloud\Model\DeleteQueuedMessagesForSendDefinitionResponse
     */
    public function deleteQueuedMessagesForSmsDefinition($definitionKey)
    {
        list($response) = $this->deleteQueuedMessagesForSmsDefinitionWithHttpInfo($definitionKey);
        return $response;
    }

    /**
     * Operation deleteQueuedMessagesForSmsDefinitionWithHttpInfo
     *
     * deleteQueuedMessagesForSmsDefinition
     *
     * @param  string $definitionKey Unique identifier of the SMS definition (required)
     *
     * @return array of \SalesForce\MarketingCloud\Model\DeleteQueuedMessagesForSendDefinitionResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     */
    public function deleteQueuedMessagesForSmsDefinitionWithHttpInfo($definitionKey)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\DeleteQueuedMessagesForSendDefinitionResponse';
        $request = $this->deleteQueuedMessagesForSmsDefinitionRequest($definitionKey);

        try {
            $options = $this->createHttpClientOption();
            try {
                /** @var \GuzzleHttp\Psr7\Response $response */
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = \GuzzleHttp\json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\DeleteQueuedMessagesForSendDefinitionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteQueuedMessagesForSmsDefinitionAsync
     *
     * deleteQueuedMessagesForSmsDefinition
     *
     * @param  string $definitionKey Unique identifier of the SMS definition (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     */
    public function deleteQueuedMessagesForSmsDefinitionAsync($definitionKey)
    {
        return $this->deleteQueuedMessagesForSmsDefinitionAsyncWithHttpInfo($definitionKey)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteQueuedMessagesForSmsDefinitionAsyncWithHttpInfo
     *
     * deleteQueuedMessagesForSmsDefinition
     *
     * @param  string $definitionKey Unique identifier of the SMS definition (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws Exception\ClientUnauthorizedException
     * @throws \InvalidArgumentException
     */
    public function deleteQueuedMessagesForSmsDefinitionAsyncWithHttpInfo($definitionKey)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\DeleteQueuedMessagesForSendDefinitionResponse';
        $request = $this->deleteQueuedMessagesForSmsDefinitionRequest($definitionKey);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = \GuzzleHttp\json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    /** @var \GuzzleHttp\Exception\RequestException $exception */
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteQueuedMessagesForSmsDefinition'
     *
     * @param  string $definitionKey Unique identifier of the SMS definition (required)
     *
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteQueuedMessagesForSmsDefinitionRequest($definitionKey)
    {
        $this->authorizeClient();

        // verify the required parameter 'definitionKey' is set
        if ($definitionKey === null || (is_array($definitionKey) && count($definitionKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $definitionKey when calling deleteQueuedMessagesForSmsDefinition'
            );
        }

        $resourcePath = '/messaging/v1/sms/definitions/{definitionKey}/queue';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($definitionKey !== null) {
            $resourcePath = str_replace(
                '{' . 'definitionKey' . '}',
                ObjectSerializer::toPathValue($definitionKey),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        // Set the header for the authorization access token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $headers['User-Agent'] = static::getUserAgent();

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteSmsDefinition
     *
     * deleteSmsDefinition
     *
     * @param  string $definitionKey Unique identifier of the definition to delete (required)
     *
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     * @return \SalesForce\MarketingCloud\Model\DeleteSendDefinitionResponse
     */
    public function deleteSmsDefinition($definitionKey)
    {
        list($response) = $this->deleteSmsDefinitionWithHttpInfo($definitionKey);
        return $response;
    }

    /**
     * Operation deleteSmsDefinitionWithHttpInfo
     *
     * deleteSmsDefinition
     *
     * @param  string $definitionKey Unique identifier of the definition to delete (required)
     *
     * @return array of \SalesForce\MarketingCloud\Model\DeleteSendDefinitionResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     */
    public function deleteSmsDefinitionWithHttpInfo($definitionKey)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\DeleteSendDefinitionResponse';
        $request = $this->deleteSmsDefinitionRequest($definitionKey);

        try {
            $options = $this->createHttpClientOption();
            try {
                /** @var \GuzzleHttp\Psr7\Response $response */
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = \GuzzleHttp\json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\DeleteSendDefinitionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteSmsDefinitionAsync
     *
     * deleteSmsDefinition
     *
     * @param  string $definitionKey Unique identifier of the definition to delete (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     */
    public function deleteSmsDefinitionAsync($definitionKey)
    {
        return $this->deleteSmsDefinitionAsyncWithHttpInfo($definitionKey)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteSmsDefinitionAsyncWithHttpInfo
     *
     * deleteSmsDefinition
     *
     * @param  string $definitionKey Unique identifier of the definition to delete (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws Exception\ClientUnauthorizedException
     * @throws \InvalidArgumentException
     */
    public function deleteSmsDefinitionAsyncWithHttpInfo($definitionKey)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\DeleteSendDefinitionResponse';
        $request = $this->deleteSmsDefinitionRequest($definitionKey);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = \GuzzleHttp\json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    /** @var \GuzzleHttp\Exception\RequestException $exception */
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteSmsDefinition'
     *
     * @param  string $definitionKey Unique identifier of the definition to delete (required)
     *
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSmsDefinitionRequest($definitionKey)
    {
        $this->authorizeClient();

        // verify the required parameter 'definitionKey' is set
        if ($definitionKey === null || (is_array($definitionKey) && count($definitionKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $definitionKey when calling deleteSmsDefinition'
            );
        }

        $resourcePath = '/messaging/v1/sms/definitions/{definitionKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($definitionKey !== null) {
            $resourcePath = str_replace(
                '{' . 'definitionKey' . '}',
                ObjectSerializer::toPathValue($definitionKey),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        // Set the header for the authorization access token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $headers['User-Agent'] = static::getUserAgent();

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailDefinition
     *
     * getEmailDefinition
     *
     * @param  string $definitionKey Unique identifier of the definition to get (required)
     *
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     * @return \SalesForce\MarketingCloud\Model\CreateEmailDefinitionRequest
     */
    public function getEmailDefinition($definitionKey)
    {
        list($response) = $this->getEmailDefinitionWithHttpInfo($definitionKey);
        return $response;
    }

    /**
     * Operation getEmailDefinitionWithHttpInfo
     *
     * getEmailDefinition
     *
     * @param  string $definitionKey Unique identifier of the definition to get (required)
     *
     * @return array of \SalesForce\MarketingCloud\Model\CreateEmailDefinitionRequest, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     */
    public function getEmailDefinitionWithHttpInfo($definitionKey)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\CreateEmailDefinitionRequest';
        $request = $this->getEmailDefinitionRequest($definitionKey);

        try {
            $options = $this->createHttpClientOption();
            try {
                /** @var \GuzzleHttp\Psr7\Response $response */
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = \GuzzleHttp\json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\CreateEmailDefinitionRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailDefinitionAsync
     *
     * getEmailDefinition
     *
     * @param  string $definitionKey Unique identifier of the definition to get (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     */
    public function getEmailDefinitionAsync($definitionKey)
    {
        return $this->getEmailDefinitionAsyncWithHttpInfo($definitionKey)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailDefinitionAsyncWithHttpInfo
     *
     * getEmailDefinition
     *
     * @param  string $definitionKey Unique identifier of the definition to get (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws Exception\ClientUnauthorizedException
     * @throws \InvalidArgumentException
     */
    public function getEmailDefinitionAsyncWithHttpInfo($definitionKey)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\CreateEmailDefinitionRequest';
        $request = $this->getEmailDefinitionRequest($definitionKey);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = \GuzzleHttp\json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    /** @var \GuzzleHttp\Exception\RequestException $exception */
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailDefinition'
     *
     * @param  string $definitionKey Unique identifier of the definition to get (required)
     *
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailDefinitionRequest($definitionKey)
    {
        $this->authorizeClient();

        // verify the required parameter 'definitionKey' is set
        if ($definitionKey === null || (is_array($definitionKey) && count($definitionKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $definitionKey when calling getEmailDefinition'
            );
        }

        $resourcePath = '/messaging/v1/email/definitions/{definitionKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($definitionKey !== null) {
            $resourcePath = str_replace(
                '{' . 'definitionKey' . '}',
                ObjectSerializer::toPathValue($definitionKey),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        // Set the header for the authorization access token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $headers['User-Agent'] = static::getUserAgent();

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailDefinitions
     *
     * getEmailDefinitions
     *
     * @param  string $status Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)
     * @param  float $pageSize Number of definitions, which are array elements, to return per paged response. (optional)
     * @param  float $page Page number to return. (optional)
     * @param  string $orderBy Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)
     *
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     * @return \SalesForce\MarketingCloud\Model\GetEmailDefinitionsResponse
     */
    public function getEmailDefinitions($status = null, $pageSize = null, $page = null, $orderBy = null)
    {
        list($response) = $this->getEmailDefinitionsWithHttpInfo($status, $pageSize, $page, $orderBy);
        return $response;
    }

    /**
     * Operation getEmailDefinitionsWithHttpInfo
     *
     * getEmailDefinitions
     *
     * @param  string $status Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)
     * @param  float $pageSize Number of definitions, which are array elements, to return per paged response. (optional)
     * @param  float $page Page number to return. (optional)
     * @param  string $orderBy Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)
     *
     * @return array of \SalesForce\MarketingCloud\Model\GetEmailDefinitionsResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     */
    public function getEmailDefinitionsWithHttpInfo($status = null, $pageSize = null, $page = null, $orderBy = null)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\GetEmailDefinitionsResponse';
        $request = $this->getEmailDefinitionsRequest($status, $pageSize, $page, $orderBy);

        try {
            $options = $this->createHttpClientOption();
            try {
                /** @var \GuzzleHttp\Psr7\Response $response */
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = \GuzzleHttp\json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\GetEmailDefinitionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailDefinitionsAsync
     *
     * getEmailDefinitions
     *
     * @param  string $status Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)
     * @param  float $pageSize Number of definitions, which are array elements, to return per paged response. (optional)
     * @param  float $page Page number to return. (optional)
     * @param  string $orderBy Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     */
    public function getEmailDefinitionsAsync($status = null, $pageSize = null, $page = null, $orderBy = null)
    {
        return $this->getEmailDefinitionsAsyncWithHttpInfo($status, $pageSize, $page, $orderBy)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailDefinitionsAsyncWithHttpInfo
     *
     * getEmailDefinitions
     *
     * @param  string $status Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)
     * @param  float $pageSize Number of definitions, which are array elements, to return per paged response. (optional)
     * @param  float $page Page number to return. (optional)
     * @param  string $orderBy Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws Exception\ClientUnauthorizedException
     * @throws \InvalidArgumentException
     */
    public function getEmailDefinitionsAsyncWithHttpInfo($status = null, $pageSize = null, $page = null, $orderBy = null)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\GetEmailDefinitionsResponse';
        $request = $this->getEmailDefinitionsRequest($status, $pageSize, $page, $orderBy);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = \GuzzleHttp\json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    /** @var \GuzzleHttp\Exception\RequestException $exception */
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailDefinitions'
     *
     * @param  string $status Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)
     * @param  float $pageSize Number of definitions, which are array elements, to return per paged response. (optional)
     * @param  float $page Page number to return. (optional)
     * @param  string $orderBy Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)
     *
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailDefinitionsRequest($status = null, $pageSize = null, $page = null, $orderBy = null)
    {
        $this->authorizeClient();


        $resourcePath = '/messaging/v1/email/definitions/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($orderBy !== null) {
            $queryParams['orderBy'] = ObjectSerializer::toQueryValue($orderBy);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        // Set the header for the authorization access token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $headers['User-Agent'] = static::getUserAgent();

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailSendStatusForRecipient
     *
     * getEmailSendStatusForRecipient
     *
     * @param  string $messageKey Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide it in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response. (required)
     *
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     * @return \SalesForce\MarketingCloud\Model\GetDefinitionSendStatusForRecipientResponse
     */
    public function getEmailSendStatusForRecipient($messageKey)
    {
        list($response) = $this->getEmailSendStatusForRecipientWithHttpInfo($messageKey);
        return $response;
    }

    /**
     * Operation getEmailSendStatusForRecipientWithHttpInfo
     *
     * getEmailSendStatusForRecipient
     *
     * @param  string $messageKey Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide it in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response. (required)
     *
     * @return array of \SalesForce\MarketingCloud\Model\GetDefinitionSendStatusForRecipientResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     */
    public function getEmailSendStatusForRecipientWithHttpInfo($messageKey)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\GetDefinitionSendStatusForRecipientResponse';
        $request = $this->getEmailSendStatusForRecipientRequest($messageKey);

        try {
            $options = $this->createHttpClientOption();
            try {
                /** @var \GuzzleHttp\Psr7\Response $response */
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = \GuzzleHttp\json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\GetDefinitionSendStatusForRecipientResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailSendStatusForRecipientAsync
     *
     * getEmailSendStatusForRecipient
     *
     * @param  string $messageKey Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide it in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     */
    public function getEmailSendStatusForRecipientAsync($messageKey)
    {
        return $this->getEmailSendStatusForRecipientAsyncWithHttpInfo($messageKey)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailSendStatusForRecipientAsyncWithHttpInfo
     *
     * getEmailSendStatusForRecipient
     *
     * @param  string $messageKey Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide it in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws Exception\ClientUnauthorizedException
     * @throws \InvalidArgumentException
     */
    public function getEmailSendStatusForRecipientAsyncWithHttpInfo($messageKey)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\GetDefinitionSendStatusForRecipientResponse';
        $request = $this->getEmailSendStatusForRecipientRequest($messageKey);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = \GuzzleHttp\json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    /** @var \GuzzleHttp\Exception\RequestException $exception */
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailSendStatusForRecipient'
     *
     * @param  string $messageKey Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide it in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response. (required)
     *
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailSendStatusForRecipientRequest($messageKey)
    {
        $this->authorizeClient();

        // verify the required parameter 'messageKey' is set
        if ($messageKey === null || (is_array($messageKey) && count($messageKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $messageKey when calling getEmailSendStatusForRecipient'
            );
        }

        $resourcePath = '/messaging/v1/email/messages/{messageKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($messageKey !== null) {
            $resourcePath = str_replace(
                '{' . 'messageKey' . '}',
                ObjectSerializer::toPathValue($messageKey),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        // Set the header for the authorization access token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $headers['User-Agent'] = static::getUserAgent();

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailsNotSentToRecipients
     *
     * getEmailsNotSentToRecipients
     *
     * @param  string $type Only notSent is supported. (required)
     * @param  int $pageSize Number of messageKeys (array elements) to return per response page. (optional)
     * @param  int $lastEventId Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)
     *
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     * @return \SalesForce\MarketingCloud\Model\GetDefinitionsNotSentToRecipientsResponse
     */
    public function getEmailsNotSentToRecipients($type, $pageSize = null, $lastEventId = null)
    {
        list($response) = $this->getEmailsNotSentToRecipientsWithHttpInfo($type, $pageSize, $lastEventId);
        return $response;
    }

    /**
     * Operation getEmailsNotSentToRecipientsWithHttpInfo
     *
     * getEmailsNotSentToRecipients
     *
     * @param  string $type Only notSent is supported. (required)
     * @param  int $pageSize Number of messageKeys (array elements) to return per response page. (optional)
     * @param  int $lastEventId Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)
     *
     * @return array of \SalesForce\MarketingCloud\Model\GetDefinitionsNotSentToRecipientsResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     */
    public function getEmailsNotSentToRecipientsWithHttpInfo($type, $pageSize = null, $lastEventId = null)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\GetDefinitionsNotSentToRecipientsResponse';
        $request = $this->getEmailsNotSentToRecipientsRequest($type, $pageSize, $lastEventId);

        try {
            $options = $this->createHttpClientOption();
            try {
                /** @var \GuzzleHttp\Psr7\Response $response */
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = \GuzzleHttp\json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\GetDefinitionsNotSentToRecipientsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailsNotSentToRecipientsAsync
     *
     * getEmailsNotSentToRecipients
     *
     * @param  string $type Only notSent is supported. (required)
     * @param  int $pageSize Number of messageKeys (array elements) to return per response page. (optional)
     * @param  int $lastEventId Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     */
    public function getEmailsNotSentToRecipientsAsync($type, $pageSize = null, $lastEventId = null)
    {
        return $this->getEmailsNotSentToRecipientsAsyncWithHttpInfo($type, $pageSize, $lastEventId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailsNotSentToRecipientsAsyncWithHttpInfo
     *
     * getEmailsNotSentToRecipients
     *
     * @param  string $type Only notSent is supported. (required)
     * @param  int $pageSize Number of messageKeys (array elements) to return per response page. (optional)
     * @param  int $lastEventId Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws Exception\ClientUnauthorizedException
     * @throws \InvalidArgumentException
     */
    public function getEmailsNotSentToRecipientsAsyncWithHttpInfo($type, $pageSize = null, $lastEventId = null)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\GetDefinitionsNotSentToRecipientsResponse';
        $request = $this->getEmailsNotSentToRecipientsRequest($type, $pageSize, $lastEventId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = \GuzzleHttp\json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    /** @var \GuzzleHttp\Exception\RequestException $exception */
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailsNotSentToRecipients'
     *
     * @param  string $type Only notSent is supported. (required)
     * @param  int $pageSize Number of messageKeys (array elements) to return per response page. (optional)
     * @param  int $lastEventId Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)
     *
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailsNotSentToRecipientsRequest($type, $pageSize = null, $lastEventId = null)
    {
        $this->authorizeClient();

        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling getEmailsNotSentToRecipients'
            );
        }

        $resourcePath = '/messaging/v1/email/messages/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($pageSize !== null) {
            $queryParams['$pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($lastEventId !== null) {
            $queryParams['lastEventId'] = ObjectSerializer::toQueryValue($lastEventId);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        // Set the header for the authorization access token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $headers['User-Agent'] = static::getUserAgent();

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQueueMetricsForEmailDefinition
     *
     * getQueueMetricsForEmailDefinition
     *
     * @param  string $definitionKey Unique identifier of the email definition (required)
     *
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     * @return \SalesForce\MarketingCloud\Model\GetQueueMetricsForSendDefinitionResponse
     */
    public function getQueueMetricsForEmailDefinition($definitionKey)
    {
        list($response) = $this->getQueueMetricsForEmailDefinitionWithHttpInfo($definitionKey);
        return $response;
    }

    /**
     * Operation getQueueMetricsForEmailDefinitionWithHttpInfo
     *
     * getQueueMetricsForEmailDefinition
     *
     * @param  string $definitionKey Unique identifier of the email definition (required)
     *
     * @return array of \SalesForce\MarketingCloud\Model\GetQueueMetricsForSendDefinitionResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     */
    public function getQueueMetricsForEmailDefinitionWithHttpInfo($definitionKey)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\GetQueueMetricsForSendDefinitionResponse';
        $request = $this->getQueueMetricsForEmailDefinitionRequest($definitionKey);

        try {
            $options = $this->createHttpClientOption();
            try {
                /** @var \GuzzleHttp\Psr7\Response $response */
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = \GuzzleHttp\json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\GetQueueMetricsForSendDefinitionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQueueMetricsForEmailDefinitionAsync
     *
     * getQueueMetricsForEmailDefinition
     *
     * @param  string $definitionKey Unique identifier of the email definition (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     */
    public function getQueueMetricsForEmailDefinitionAsync($definitionKey)
    {
        return $this->getQueueMetricsForEmailDefinitionAsyncWithHttpInfo($definitionKey)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQueueMetricsForEmailDefinitionAsyncWithHttpInfo
     *
     * getQueueMetricsForEmailDefinition
     *
     * @param  string $definitionKey Unique identifier of the email definition (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws Exception\ClientUnauthorizedException
     * @throws \InvalidArgumentException
     */
    public function getQueueMetricsForEmailDefinitionAsyncWithHttpInfo($definitionKey)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\GetQueueMetricsForSendDefinitionResponse';
        $request = $this->getQueueMetricsForEmailDefinitionRequest($definitionKey);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = \GuzzleHttp\json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    /** @var \GuzzleHttp\Exception\RequestException $exception */
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQueueMetricsForEmailDefinition'
     *
     * @param  string $definitionKey Unique identifier of the email definition (required)
     *
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQueueMetricsForEmailDefinitionRequest($definitionKey)
    {
        $this->authorizeClient();

        // verify the required parameter 'definitionKey' is set
        if ($definitionKey === null || (is_array($definitionKey) && count($definitionKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $definitionKey when calling getQueueMetricsForEmailDefinition'
            );
        }

        $resourcePath = '/messaging/v1/email/definitions/{definitionKey}/queue';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($definitionKey !== null) {
            $resourcePath = str_replace(
                '{' . 'definitionKey' . '}',
                ObjectSerializer::toPathValue($definitionKey),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        // Set the header for the authorization access token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $headers['User-Agent'] = static::getUserAgent();

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQueueMetricsForSmsDefinition
     *
     * getQueueMetricsForSmsDefinition
     *
     * @param  string $definitionKey Unique identifier of the SMS definition (required)
     *
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     * @return \SalesForce\MarketingCloud\Model\GetQueueMetricsForSendDefinitionResponse
     */
    public function getQueueMetricsForSmsDefinition($definitionKey)
    {
        list($response) = $this->getQueueMetricsForSmsDefinitionWithHttpInfo($definitionKey);
        return $response;
    }

    /**
     * Operation getQueueMetricsForSmsDefinitionWithHttpInfo
     *
     * getQueueMetricsForSmsDefinition
     *
     * @param  string $definitionKey Unique identifier of the SMS definition (required)
     *
     * @return array of \SalesForce\MarketingCloud\Model\GetQueueMetricsForSendDefinitionResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     */
    public function getQueueMetricsForSmsDefinitionWithHttpInfo($definitionKey)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\GetQueueMetricsForSendDefinitionResponse';
        $request = $this->getQueueMetricsForSmsDefinitionRequest($definitionKey);

        try {
            $options = $this->createHttpClientOption();
            try {
                /** @var \GuzzleHttp\Psr7\Response $response */
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = \GuzzleHttp\json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\GetQueueMetricsForSendDefinitionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQueueMetricsForSmsDefinitionAsync
     *
     * getQueueMetricsForSmsDefinition
     *
     * @param  string $definitionKey Unique identifier of the SMS definition (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     */
    public function getQueueMetricsForSmsDefinitionAsync($definitionKey)
    {
        return $this->getQueueMetricsForSmsDefinitionAsyncWithHttpInfo($definitionKey)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQueueMetricsForSmsDefinitionAsyncWithHttpInfo
     *
     * getQueueMetricsForSmsDefinition
     *
     * @param  string $definitionKey Unique identifier of the SMS definition (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws Exception\ClientUnauthorizedException
     * @throws \InvalidArgumentException
     */
    public function getQueueMetricsForSmsDefinitionAsyncWithHttpInfo($definitionKey)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\GetQueueMetricsForSendDefinitionResponse';
        $request = $this->getQueueMetricsForSmsDefinitionRequest($definitionKey);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = \GuzzleHttp\json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    /** @var \GuzzleHttp\Exception\RequestException $exception */
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQueueMetricsForSmsDefinition'
     *
     * @param  string $definitionKey Unique identifier of the SMS definition (required)
     *
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQueueMetricsForSmsDefinitionRequest($definitionKey)
    {
        $this->authorizeClient();

        // verify the required parameter 'definitionKey' is set
        if ($definitionKey === null || (is_array($definitionKey) && count($definitionKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $definitionKey when calling getQueueMetricsForSmsDefinition'
            );
        }

        $resourcePath = '/messaging/v1/sms/definitions/{definitionKey}/queue';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($definitionKey !== null) {
            $resourcePath = str_replace(
                '{' . 'definitionKey' . '}',
                ObjectSerializer::toPathValue($definitionKey),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        // Set the header for the authorization access token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $headers['User-Agent'] = static::getUserAgent();

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSMSsNotSentToRecipients
     *
     * getSMSsNotSentToRecipients
     *
     * @param  string $type Only notSent is supported. (required)
     * @param  int $pageSize Number of messageKeys (array elements) to return per response page. (optional)
     * @param  int $lastEventId Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)
     *
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     * @return \SalesForce\MarketingCloud\Model\GetDefinitionsNotSentToRecipientsResponse
     */
    public function getSMSsNotSentToRecipients($type, $pageSize = null, $lastEventId = null)
    {
        list($response) = $this->getSMSsNotSentToRecipientsWithHttpInfo($type, $pageSize, $lastEventId);
        return $response;
    }

    /**
     * Operation getSMSsNotSentToRecipientsWithHttpInfo
     *
     * getSMSsNotSentToRecipients
     *
     * @param  string $type Only notSent is supported. (required)
     * @param  int $pageSize Number of messageKeys (array elements) to return per response page. (optional)
     * @param  int $lastEventId Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)
     *
     * @return array of \SalesForce\MarketingCloud\Model\GetDefinitionsNotSentToRecipientsResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     */
    public function getSMSsNotSentToRecipientsWithHttpInfo($type, $pageSize = null, $lastEventId = null)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\GetDefinitionsNotSentToRecipientsResponse';
        $request = $this->getSMSsNotSentToRecipientsRequest($type, $pageSize, $lastEventId);

        try {
            $options = $this->createHttpClientOption();
            try {
                /** @var \GuzzleHttp\Psr7\Response $response */
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = \GuzzleHttp\json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\GetDefinitionsNotSentToRecipientsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSMSsNotSentToRecipientsAsync
     *
     * getSMSsNotSentToRecipients
     *
     * @param  string $type Only notSent is supported. (required)
     * @param  int $pageSize Number of messageKeys (array elements) to return per response page. (optional)
     * @param  int $lastEventId Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     */
    public function getSMSsNotSentToRecipientsAsync($type, $pageSize = null, $lastEventId = null)
    {
        return $this->getSMSsNotSentToRecipientsAsyncWithHttpInfo($type, $pageSize, $lastEventId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSMSsNotSentToRecipientsAsyncWithHttpInfo
     *
     * getSMSsNotSentToRecipients
     *
     * @param  string $type Only notSent is supported. (required)
     * @param  int $pageSize Number of messageKeys (array elements) to return per response page. (optional)
     * @param  int $lastEventId Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws Exception\ClientUnauthorizedException
     * @throws \InvalidArgumentException
     */
    public function getSMSsNotSentToRecipientsAsyncWithHttpInfo($type, $pageSize = null, $lastEventId = null)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\GetDefinitionsNotSentToRecipientsResponse';
        $request = $this->getSMSsNotSentToRecipientsRequest($type, $pageSize, $lastEventId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = \GuzzleHttp\json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    /** @var \GuzzleHttp\Exception\RequestException $exception */
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSMSsNotSentToRecipients'
     *
     * @param  string $type Only notSent is supported. (required)
     * @param  int $pageSize Number of messageKeys (array elements) to return per response page. (optional)
     * @param  int $lastEventId Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)
     *
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSMSsNotSentToRecipientsRequest($type, $pageSize = null, $lastEventId = null)
    {
        $this->authorizeClient();

        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling getSMSsNotSentToRecipients'
            );
        }

        $resourcePath = '/messaging/v1/sms/messages/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($pageSize !== null) {
            $queryParams['$pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($lastEventId !== null) {
            $queryParams['lastEventId'] = ObjectSerializer::toQueryValue($lastEventId);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        // Set the header for the authorization access token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $headers['User-Agent'] = static::getUserAgent();

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSmsDefinition
     *
     * getSmsDefinition
     *
     * @param  string $definitionKey Unique identifier of the definition to get (required)
     *
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     * @return \SalesForce\MarketingCloud\Model\CreateSmsDefinitionRequest
     */
    public function getSmsDefinition($definitionKey)
    {
        list($response) = $this->getSmsDefinitionWithHttpInfo($definitionKey);
        return $response;
    }

    /**
     * Operation getSmsDefinitionWithHttpInfo
     *
     * getSmsDefinition
     *
     * @param  string $definitionKey Unique identifier of the definition to get (required)
     *
     * @return array of \SalesForce\MarketingCloud\Model\CreateSmsDefinitionRequest, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     */
    public function getSmsDefinitionWithHttpInfo($definitionKey)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\CreateSmsDefinitionRequest';
        $request = $this->getSmsDefinitionRequest($definitionKey);

        try {
            $options = $this->createHttpClientOption();
            try {
                /** @var \GuzzleHttp\Psr7\Response $response */
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = \GuzzleHttp\json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\CreateSmsDefinitionRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSmsDefinitionAsync
     *
     * getSmsDefinition
     *
     * @param  string $definitionKey Unique identifier of the definition to get (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     */
    public function getSmsDefinitionAsync($definitionKey)
    {
        return $this->getSmsDefinitionAsyncWithHttpInfo($definitionKey)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSmsDefinitionAsyncWithHttpInfo
     *
     * getSmsDefinition
     *
     * @param  string $definitionKey Unique identifier of the definition to get (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws Exception\ClientUnauthorizedException
     * @throws \InvalidArgumentException
     */
    public function getSmsDefinitionAsyncWithHttpInfo($definitionKey)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\CreateSmsDefinitionRequest';
        $request = $this->getSmsDefinitionRequest($definitionKey);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = \GuzzleHttp\json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    /** @var \GuzzleHttp\Exception\RequestException $exception */
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSmsDefinition'
     *
     * @param  string $definitionKey Unique identifier of the definition to get (required)
     *
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSmsDefinitionRequest($definitionKey)
    {
        $this->authorizeClient();

        // verify the required parameter 'definitionKey' is set
        if ($definitionKey === null || (is_array($definitionKey) && count($definitionKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $definitionKey when calling getSmsDefinition'
            );
        }

        $resourcePath = '/messaging/v1/sms/definitions/{definitionKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($definitionKey !== null) {
            $resourcePath = str_replace(
                '{' . 'definitionKey' . '}',
                ObjectSerializer::toPathValue($definitionKey),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        // Set the header for the authorization access token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $headers['User-Agent'] = static::getUserAgent();

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSmsDefinitions
     *
     * getSmsDefinitions
     *
     * @param  string $status Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)
     * @param  float $pageSize Number of definitions, which are array elements, to return per paged response. (optional)
     * @param  float $page Page number to return. (optional)
     * @param  string $orderBy Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)
     *
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     * @return \SalesForce\MarketingCloud\Model\GetSmsDefinitionsResponse
     */
    public function getSmsDefinitions($status = null, $pageSize = null, $page = null, $orderBy = null)
    {
        list($response) = $this->getSmsDefinitionsWithHttpInfo($status, $pageSize, $page, $orderBy);
        return $response;
    }

    /**
     * Operation getSmsDefinitionsWithHttpInfo
     *
     * getSmsDefinitions
     *
     * @param  string $status Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)
     * @param  float $pageSize Number of definitions, which are array elements, to return per paged response. (optional)
     * @param  float $page Page number to return. (optional)
     * @param  string $orderBy Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)
     *
     * @return array of \SalesForce\MarketingCloud\Model\GetSmsDefinitionsResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     */
    public function getSmsDefinitionsWithHttpInfo($status = null, $pageSize = null, $page = null, $orderBy = null)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\GetSmsDefinitionsResponse';
        $request = $this->getSmsDefinitionsRequest($status, $pageSize, $page, $orderBy);

        try {
            $options = $this->createHttpClientOption();
            try {
                /** @var \GuzzleHttp\Psr7\Response $response */
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = \GuzzleHttp\json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\GetSmsDefinitionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSmsDefinitionsAsync
     *
     * getSmsDefinitions
     *
     * @param  string $status Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)
     * @param  float $pageSize Number of definitions, which are array elements, to return per paged response. (optional)
     * @param  float $page Page number to return. (optional)
     * @param  string $orderBy Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     */
    public function getSmsDefinitionsAsync($status = null, $pageSize = null, $page = null, $orderBy = null)
    {
        return $this->getSmsDefinitionsAsyncWithHttpInfo($status, $pageSize, $page, $orderBy)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSmsDefinitionsAsyncWithHttpInfo
     *
     * getSmsDefinitions
     *
     * @param  string $status Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)
     * @param  float $pageSize Number of definitions, which are array elements, to return per paged response. (optional)
     * @param  float $page Page number to return. (optional)
     * @param  string $orderBy Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws Exception\ClientUnauthorizedException
     * @throws \InvalidArgumentException
     */
    public function getSmsDefinitionsAsyncWithHttpInfo($status = null, $pageSize = null, $page = null, $orderBy = null)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\GetSmsDefinitionsResponse';
        $request = $this->getSmsDefinitionsRequest($status, $pageSize, $page, $orderBy);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = \GuzzleHttp\json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    /** @var \GuzzleHttp\Exception\RequestException $exception */
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSmsDefinitions'
     *
     * @param  string $status Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)
     * @param  float $pageSize Number of definitions, which are array elements, to return per paged response. (optional)
     * @param  float $page Page number to return. (optional)
     * @param  string $orderBy Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)
     *
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSmsDefinitionsRequest($status = null, $pageSize = null, $page = null, $orderBy = null)
    {
        $this->authorizeClient();


        $resourcePath = '/messaging/v1/sms/definitions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($orderBy !== null) {
            $queryParams['orderBy'] = ObjectSerializer::toQueryValue($orderBy);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        // Set the header for the authorization access token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $headers['User-Agent'] = static::getUserAgent();

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSmsSendStatusForRecipient
     *
     * getSmsSendStatusForRecipient
     *
     * @param  string $messageKey Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide message key in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response. (required)
     *
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     * @return \SalesForce\MarketingCloud\Model\GetDefinitionSendStatusForRecipientResponse
     */
    public function getSmsSendStatusForRecipient($messageKey)
    {
        list($response) = $this->getSmsSendStatusForRecipientWithHttpInfo($messageKey);
        return $response;
    }

    /**
     * Operation getSmsSendStatusForRecipientWithHttpInfo
     *
     * getSmsSendStatusForRecipient
     *
     * @param  string $messageKey Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide message key in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response. (required)
     *
     * @return array of \SalesForce\MarketingCloud\Model\GetDefinitionSendStatusForRecipientResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     */
    public function getSmsSendStatusForRecipientWithHttpInfo($messageKey)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\GetDefinitionSendStatusForRecipientResponse';
        $request = $this->getSmsSendStatusForRecipientRequest($messageKey);

        try {
            $options = $this->createHttpClientOption();
            try {
                /** @var \GuzzleHttp\Psr7\Response $response */
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = \GuzzleHttp\json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\GetDefinitionSendStatusForRecipientResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSmsSendStatusForRecipientAsync
     *
     * getSmsSendStatusForRecipient
     *
     * @param  string $messageKey Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide message key in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     */
    public function getSmsSendStatusForRecipientAsync($messageKey)
    {
        return $this->getSmsSendStatusForRecipientAsyncWithHttpInfo($messageKey)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSmsSendStatusForRecipientAsyncWithHttpInfo
     *
     * getSmsSendStatusForRecipient
     *
     * @param  string $messageKey Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide message key in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws Exception\ClientUnauthorizedException
     * @throws \InvalidArgumentException
     */
    public function getSmsSendStatusForRecipientAsyncWithHttpInfo($messageKey)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\GetDefinitionSendStatusForRecipientResponse';
        $request = $this->getSmsSendStatusForRecipientRequest($messageKey);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = \GuzzleHttp\json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    /** @var \GuzzleHttp\Exception\RequestException $exception */
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSmsSendStatusForRecipient'
     *
     * @param  string $messageKey Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide message key in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response. (required)
     *
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSmsSendStatusForRecipientRequest($messageKey)
    {
        $this->authorizeClient();

        // verify the required parameter 'messageKey' is set
        if ($messageKey === null || (is_array($messageKey) && count($messageKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $messageKey when calling getSmsSendStatusForRecipient'
            );
        }

        $resourcePath = '/messaging/v1/sms/messages/{messageKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($messageKey !== null) {
            $resourcePath = str_replace(
                '{' . 'messageKey' . '}',
                ObjectSerializer::toPathValue($messageKey),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        // Set the header for the authorization access token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $headers['User-Agent'] = static::getUserAgent();

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation partiallyUpdateEmailDefinition
     *
     * partiallyUpdateEmailDefinition
     *
     * @param  string $definitionKey Unique identifier of the definition. (required)
     * @param  \SalesForce\MarketingCloud\Model\UpdateEmailDefinitionRequest $body JSON Parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     * @return \SalesForce\MarketingCloud\Model\CreateEmailDefinitionRequest
     */
    public function partiallyUpdateEmailDefinition($definitionKey, $body = null)
    {
        list($response) = $this->partiallyUpdateEmailDefinitionWithHttpInfo($definitionKey, $body);
        return $response;
    }

    /**
     * Operation partiallyUpdateEmailDefinitionWithHttpInfo
     *
     * partiallyUpdateEmailDefinition
     *
     * @param  string $definitionKey Unique identifier of the definition. (required)
     * @param  \SalesForce\MarketingCloud\Model\UpdateEmailDefinitionRequest $body JSON Parameters (optional)
     *
     * @return array of \SalesForce\MarketingCloud\Model\CreateEmailDefinitionRequest, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     */
    public function partiallyUpdateEmailDefinitionWithHttpInfo($definitionKey, $body = null)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\CreateEmailDefinitionRequest';
        $request = $this->partiallyUpdateEmailDefinitionRequest($definitionKey, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                /** @var \GuzzleHttp\Psr7\Response $response */
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = \GuzzleHttp\json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\CreateEmailDefinitionRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation partiallyUpdateEmailDefinitionAsync
     *
     * partiallyUpdateEmailDefinition
     *
     * @param  string $definitionKey Unique identifier of the definition. (required)
     * @param  \SalesForce\MarketingCloud\Model\UpdateEmailDefinitionRequest $body JSON Parameters (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     */
    public function partiallyUpdateEmailDefinitionAsync($definitionKey, $body = null)
    {
        return $this->partiallyUpdateEmailDefinitionAsyncWithHttpInfo($definitionKey, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation partiallyUpdateEmailDefinitionAsyncWithHttpInfo
     *
     * partiallyUpdateEmailDefinition
     *
     * @param  string $definitionKey Unique identifier of the definition. (required)
     * @param  \SalesForce\MarketingCloud\Model\UpdateEmailDefinitionRequest $body JSON Parameters (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws Exception\ClientUnauthorizedException
     * @throws \InvalidArgumentException
     */
    public function partiallyUpdateEmailDefinitionAsyncWithHttpInfo($definitionKey, $body = null)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\CreateEmailDefinitionRequest';
        $request = $this->partiallyUpdateEmailDefinitionRequest($definitionKey, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = \GuzzleHttp\json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    /** @var \GuzzleHttp\Exception\RequestException $exception */
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'partiallyUpdateEmailDefinition'
     *
     * @param  string $definitionKey Unique identifier of the definition. (required)
     * @param  \SalesForce\MarketingCloud\Model\UpdateEmailDefinitionRequest $body JSON Parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function partiallyUpdateEmailDefinitionRequest($definitionKey, $body = null)
    {
        $this->authorizeClient();

        // verify the required parameter 'definitionKey' is set
        if ($definitionKey === null || (is_array($definitionKey) && count($definitionKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $definitionKey when calling partiallyUpdateEmailDefinition'
            );
        }

        $resourcePath = '/messaging/v1/email/definitions/{definitionKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($definitionKey !== null) {
            $resourcePath = str_replace(
                '{' . 'definitionKey' . '}',
                ObjectSerializer::toPathValue($definitionKey),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        // Set the header for the authorization access token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $headers['User-Agent'] = static::getUserAgent();

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation partiallyUpdateSmsDefinition
     *
     * partiallyUpdateSmsDefinition
     *
     * @param  string $definitionKey Unique identifier of the definition. (required)
     * @param  \SalesForce\MarketingCloud\Model\UpdateSmsDefinitionRequest $body JSON Parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     * @return \SalesForce\MarketingCloud\Model\CreateSmsDefinitionRequest
     */
    public function partiallyUpdateSmsDefinition($definitionKey, $body = null)
    {
        list($response) = $this->partiallyUpdateSmsDefinitionWithHttpInfo($definitionKey, $body);
        return $response;
    }

    /**
     * Operation partiallyUpdateSmsDefinitionWithHttpInfo
     *
     * partiallyUpdateSmsDefinition
     *
     * @param  string $definitionKey Unique identifier of the definition. (required)
     * @param  \SalesForce\MarketingCloud\Model\UpdateSmsDefinitionRequest $body JSON Parameters (optional)
     *
     * @return array of \SalesForce\MarketingCloud\Model\CreateSmsDefinitionRequest, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     */
    public function partiallyUpdateSmsDefinitionWithHttpInfo($definitionKey, $body = null)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\CreateSmsDefinitionRequest';
        $request = $this->partiallyUpdateSmsDefinitionRequest($definitionKey, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                /** @var \GuzzleHttp\Psr7\Response $response */
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = \GuzzleHttp\json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\CreateSmsDefinitionRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation partiallyUpdateSmsDefinitionAsync
     *
     * partiallyUpdateSmsDefinition
     *
     * @param  string $definitionKey Unique identifier of the definition. (required)
     * @param  \SalesForce\MarketingCloud\Model\UpdateSmsDefinitionRequest $body JSON Parameters (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     */
    public function partiallyUpdateSmsDefinitionAsync($definitionKey, $body = null)
    {
        return $this->partiallyUpdateSmsDefinitionAsyncWithHttpInfo($definitionKey, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation partiallyUpdateSmsDefinitionAsyncWithHttpInfo
     *
     * partiallyUpdateSmsDefinition
     *
     * @param  string $definitionKey Unique identifier of the definition. (required)
     * @param  \SalesForce\MarketingCloud\Model\UpdateSmsDefinitionRequest $body JSON Parameters (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws Exception\ClientUnauthorizedException
     * @throws \InvalidArgumentException
     */
    public function partiallyUpdateSmsDefinitionAsyncWithHttpInfo($definitionKey, $body = null)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\CreateSmsDefinitionRequest';
        $request = $this->partiallyUpdateSmsDefinitionRequest($definitionKey, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = \GuzzleHttp\json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    /** @var \GuzzleHttp\Exception\RequestException $exception */
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'partiallyUpdateSmsDefinition'
     *
     * @param  string $definitionKey Unique identifier of the definition. (required)
     * @param  \SalesForce\MarketingCloud\Model\UpdateSmsDefinitionRequest $body JSON Parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function partiallyUpdateSmsDefinitionRequest($definitionKey, $body = null)
    {
        $this->authorizeClient();

        // verify the required parameter 'definitionKey' is set
        if ($definitionKey === null || (is_array($definitionKey) && count($definitionKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $definitionKey when calling partiallyUpdateSmsDefinition'
            );
        }

        $resourcePath = '/messaging/v1/sms/definitions/{definitionKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($definitionKey !== null) {
            $resourcePath = str_replace(
                '{' . 'definitionKey' . '}',
                ObjectSerializer::toPathValue($definitionKey),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        // Set the header for the authorization access token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $headers['User-Agent'] = static::getUserAgent();

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendEmailToMultipleRecipients
     *
     * sendEmailToMultipleRecipients
     *
     * @param  \SalesForce\MarketingCloud\Model\SendEmailToMultipleRecipientsRequest $body JSON Parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     * @return \SalesForce\MarketingCloud\Model\SendDefinitionToMultipleRecipientsResponse
     */
    public function sendEmailToMultipleRecipients($body = null)
    {
        list($response) = $this->sendEmailToMultipleRecipientsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation sendEmailToMultipleRecipientsWithHttpInfo
     *
     * sendEmailToMultipleRecipients
     *
     * @param  \SalesForce\MarketingCloud\Model\SendEmailToMultipleRecipientsRequest $body JSON Parameters (optional)
     *
     * @return array of \SalesForce\MarketingCloud\Model\SendDefinitionToMultipleRecipientsResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     */
    public function sendEmailToMultipleRecipientsWithHttpInfo($body = null)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\SendDefinitionToMultipleRecipientsResponse';
        $request = $this->sendEmailToMultipleRecipientsRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                /** @var \GuzzleHttp\Psr7\Response $response */
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = \GuzzleHttp\json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\SendDefinitionToMultipleRecipientsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendEmailToMultipleRecipientsAsync
     *
     * sendEmailToMultipleRecipients
     *
     * @param  \SalesForce\MarketingCloud\Model\SendEmailToMultipleRecipientsRequest $body JSON Parameters (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     */
    public function sendEmailToMultipleRecipientsAsync($body = null)
    {
        return $this->sendEmailToMultipleRecipientsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendEmailToMultipleRecipientsAsyncWithHttpInfo
     *
     * sendEmailToMultipleRecipients
     *
     * @param  \SalesForce\MarketingCloud\Model\SendEmailToMultipleRecipientsRequest $body JSON Parameters (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws Exception\ClientUnauthorizedException
     * @throws \InvalidArgumentException
     */
    public function sendEmailToMultipleRecipientsAsyncWithHttpInfo($body = null)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\SendDefinitionToMultipleRecipientsResponse';
        $request = $this->sendEmailToMultipleRecipientsRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = \GuzzleHttp\json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    /** @var \GuzzleHttp\Exception\RequestException $exception */
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendEmailToMultipleRecipients'
     *
     * @param  \SalesForce\MarketingCloud\Model\SendEmailToMultipleRecipientsRequest $body JSON Parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendEmailToMultipleRecipientsRequest($body = null)
    {
        $this->authorizeClient();


        $resourcePath = '/messaging/v1/email/messages/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        // Set the header for the authorization access token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $headers['User-Agent'] = static::getUserAgent();

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendEmailToSingleRecipient
     *
     * sendEmailToSingleRecipient
     *
     * @param  string $messageKey Unique identifier used to track message status. Can be automatically created when you create a message or provided as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected. (required)
     * @param  \SalesForce\MarketingCloud\Model\SendEmailToSingleRecipientRequest $body JSON Parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     * @return \SalesForce\MarketingCloud\Model\SendDefinitionToSingleRecipientResponse
     */
    public function sendEmailToSingleRecipient($messageKey, $body = null)
    {
        list($response) = $this->sendEmailToSingleRecipientWithHttpInfo($messageKey, $body);
        return $response;
    }

    /**
     * Operation sendEmailToSingleRecipientWithHttpInfo
     *
     * sendEmailToSingleRecipient
     *
     * @param  string $messageKey Unique identifier used to track message status. Can be automatically created when you create a message or provided as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected. (required)
     * @param  \SalesForce\MarketingCloud\Model\SendEmailToSingleRecipientRequest $body JSON Parameters (optional)
     *
     * @return array of \SalesForce\MarketingCloud\Model\SendDefinitionToSingleRecipientResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     */
    public function sendEmailToSingleRecipientWithHttpInfo($messageKey, $body = null)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\SendDefinitionToSingleRecipientResponse';
        $request = $this->sendEmailToSingleRecipientRequest($messageKey, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                /** @var \GuzzleHttp\Psr7\Response $response */
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = \GuzzleHttp\json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\SendDefinitionToSingleRecipientResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendEmailToSingleRecipientAsync
     *
     * sendEmailToSingleRecipient
     *
     * @param  string $messageKey Unique identifier used to track message status. Can be automatically created when you create a message or provided as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected. (required)
     * @param  \SalesForce\MarketingCloud\Model\SendEmailToSingleRecipientRequest $body JSON Parameters (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     */
    public function sendEmailToSingleRecipientAsync($messageKey, $body = null)
    {
        return $this->sendEmailToSingleRecipientAsyncWithHttpInfo($messageKey, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendEmailToSingleRecipientAsyncWithHttpInfo
     *
     * sendEmailToSingleRecipient
     *
     * @param  string $messageKey Unique identifier used to track message status. Can be automatically created when you create a message or provided as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected. (required)
     * @param  \SalesForce\MarketingCloud\Model\SendEmailToSingleRecipientRequest $body JSON Parameters (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws Exception\ClientUnauthorizedException
     * @throws \InvalidArgumentException
     */
    public function sendEmailToSingleRecipientAsyncWithHttpInfo($messageKey, $body = null)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\SendDefinitionToSingleRecipientResponse';
        $request = $this->sendEmailToSingleRecipientRequest($messageKey, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = \GuzzleHttp\json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    /** @var \GuzzleHttp\Exception\RequestException $exception */
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendEmailToSingleRecipient'
     *
     * @param  string $messageKey Unique identifier used to track message status. Can be automatically created when you create a message or provided as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected. (required)
     * @param  \SalesForce\MarketingCloud\Model\SendEmailToSingleRecipientRequest $body JSON Parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendEmailToSingleRecipientRequest($messageKey, $body = null)
    {
        $this->authorizeClient();

        // verify the required parameter 'messageKey' is set
        if ($messageKey === null || (is_array($messageKey) && count($messageKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $messageKey when calling sendEmailToSingleRecipient'
            );
        }

        $resourcePath = '/messaging/v1/email/messages/{messageKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($messageKey !== null) {
            $resourcePath = str_replace(
                '{' . 'messageKey' . '}',
                ObjectSerializer::toPathValue($messageKey),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        // Set the header for the authorization access token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $headers['User-Agent'] = static::getUserAgent();

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendSmsToMultipleRecipients
     *
     * sendSmsToMultipleRecipients
     *
     * @param  \SalesForce\MarketingCloud\Model\SendSmsToMultipleRecipientsRequest $body JSON Parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     * @return \SalesForce\MarketingCloud\Model\SendDefinitionToMultipleRecipientsResponse
     */
    public function sendSmsToMultipleRecipients($body = null)
    {
        list($response) = $this->sendSmsToMultipleRecipientsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation sendSmsToMultipleRecipientsWithHttpInfo
     *
     * sendSmsToMultipleRecipients
     *
     * @param  \SalesForce\MarketingCloud\Model\SendSmsToMultipleRecipientsRequest $body JSON Parameters (optional)
     *
     * @return array of \SalesForce\MarketingCloud\Model\SendDefinitionToMultipleRecipientsResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     */
    public function sendSmsToMultipleRecipientsWithHttpInfo($body = null)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\SendDefinitionToMultipleRecipientsResponse';
        $request = $this->sendSmsToMultipleRecipientsRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                /** @var \GuzzleHttp\Psr7\Response $response */
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = \GuzzleHttp\json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\SendDefinitionToMultipleRecipientsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendSmsToMultipleRecipientsAsync
     *
     * sendSmsToMultipleRecipients
     *
     * @param  \SalesForce\MarketingCloud\Model\SendSmsToMultipleRecipientsRequest $body JSON Parameters (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     */
    public function sendSmsToMultipleRecipientsAsync($body = null)
    {
        return $this->sendSmsToMultipleRecipientsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendSmsToMultipleRecipientsAsyncWithHttpInfo
     *
     * sendSmsToMultipleRecipients
     *
     * @param  \SalesForce\MarketingCloud\Model\SendSmsToMultipleRecipientsRequest $body JSON Parameters (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws Exception\ClientUnauthorizedException
     * @throws \InvalidArgumentException
     */
    public function sendSmsToMultipleRecipientsAsyncWithHttpInfo($body = null)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\SendDefinitionToMultipleRecipientsResponse';
        $request = $this->sendSmsToMultipleRecipientsRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = \GuzzleHttp\json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    /** @var \GuzzleHttp\Exception\RequestException $exception */
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendSmsToMultipleRecipients'
     *
     * @param  \SalesForce\MarketingCloud\Model\SendSmsToMultipleRecipientsRequest $body JSON Parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendSmsToMultipleRecipientsRequest($body = null)
    {
        $this->authorizeClient();


        $resourcePath = '/messaging/v1/sms/messages/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        // Set the header for the authorization access token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $headers['User-Agent'] = static::getUserAgent();

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendSmsToSingleRecipient
     *
     * sendSmsToSingleRecipient
     *
     * @param  string $messageKey Unique identifier of the definition used to track message status. The messageKey can be created automatically when you create a message, or you can provide it as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected. (required)
     * @param  \SalesForce\MarketingCloud\Model\SendSmsToSingleRecipientRequest $body JSON Parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     * @return \SalesForce\MarketingCloud\Model\SendDefinitionToSingleRecipientResponse
     */
    public function sendSmsToSingleRecipient($messageKey, $body = null)
    {
        list($response) = $this->sendSmsToSingleRecipientWithHttpInfo($messageKey, $body);
        return $response;
    }

    /**
     * Operation sendSmsToSingleRecipientWithHttpInfo
     *
     * sendSmsToSingleRecipient
     *
     * @param  string $messageKey Unique identifier of the definition used to track message status. The messageKey can be created automatically when you create a message, or you can provide it as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected. (required)
     * @param  \SalesForce\MarketingCloud\Model\SendSmsToSingleRecipientRequest $body JSON Parameters (optional)
     *
     * @return array of \SalesForce\MarketingCloud\Model\SendDefinitionToSingleRecipientResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     */
    public function sendSmsToSingleRecipientWithHttpInfo($messageKey, $body = null)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\SendDefinitionToSingleRecipientResponse';
        $request = $this->sendSmsToSingleRecipientRequest($messageKey, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                /** @var \GuzzleHttp\Psr7\Response $response */
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = \GuzzleHttp\json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\SendDefinitionToSingleRecipientResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendSmsToSingleRecipientAsync
     *
     * sendSmsToSingleRecipient
     *
     * @param  string $messageKey Unique identifier of the definition used to track message status. The messageKey can be created automatically when you create a message, or you can provide it as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected. (required)
     * @param  \SalesForce\MarketingCloud\Model\SendSmsToSingleRecipientRequest $body JSON Parameters (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     */
    public function sendSmsToSingleRecipientAsync($messageKey, $body = null)
    {
        return $this->sendSmsToSingleRecipientAsyncWithHttpInfo($messageKey, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendSmsToSingleRecipientAsyncWithHttpInfo
     *
     * sendSmsToSingleRecipient
     *
     * @param  string $messageKey Unique identifier of the definition used to track message status. The messageKey can be created automatically when you create a message, or you can provide it as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected. (required)
     * @param  \SalesForce\MarketingCloud\Model\SendSmsToSingleRecipientRequest $body JSON Parameters (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws Exception\ClientUnauthorizedException
     * @throws \InvalidArgumentException
     */
    public function sendSmsToSingleRecipientAsyncWithHttpInfo($messageKey, $body = null)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\SendDefinitionToSingleRecipientResponse';
        $request = $this->sendSmsToSingleRecipientRequest($messageKey, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = \GuzzleHttp\json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    /** @var \GuzzleHttp\Exception\RequestException $exception */
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendSmsToSingleRecipient'
     *
     * @param  string $messageKey Unique identifier of the definition used to track message status. The messageKey can be created automatically when you create a message, or you can provide it as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected. (required)
     * @param  \SalesForce\MarketingCloud\Model\SendSmsToSingleRecipientRequest $body JSON Parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendSmsToSingleRecipientRequest($messageKey, $body = null)
    {
        $this->authorizeClient();

        // verify the required parameter 'messageKey' is set
        if ($messageKey === null || (is_array($messageKey) && count($messageKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $messageKey when calling sendSmsToSingleRecipient'
            );
        }

        $resourcePath = '/messaging/v1/sms/messages/{messageKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($messageKey !== null) {
            $resourcePath = str_replace(
                '{' . 'messageKey' . '}',
                ObjectSerializer::toPathValue($messageKey),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        // Set the header for the authorization access token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $headers['User-Agent'] = static::getUserAgent();

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

}
