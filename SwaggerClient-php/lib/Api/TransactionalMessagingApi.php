<?php
/**
 * TransactionalMessagingApi
 * PHP version 5
 *
 * @category Class
 * @package  SalesForce\MarketingCloud\PHPSDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing Cloud REST API
 *
 * Marketing Cloud's REST API is our newest API. It supports multi-channel use cases, is much more lightweight and easy to use than our SOAP API, and is getting more comprehensive with every release.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mc_sdk@salesforce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.7
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SalesForce\MarketingCloud\PHPSDK\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use SalesForce\MarketingCloud\PHPSDK\ApiException;
use SalesForce\MarketingCloud\PHPSDK\Configuration;
use SalesForce\MarketingCloud\PHPSDK\HeaderSelector;
use SalesForce\MarketingCloud\PHPSDK\ObjectSerializer;

/**
 * TransactionalMessagingApi Class Doc Comment
 *
 * @category Class
 * @package  SalesForce\MarketingCloud\PHPSDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransactionalMessagingApi extends AbstractApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createEmailDefinition
     *
     * createEmailDefinition
     *
     * @param  \SalesForce\MarketingCloud\PHPSDK\Model\CreateEmailDefinitionRequest $body JSON Parameters (optional)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SalesForce\MarketingCloud\PHPSDK\Model\CreateEmailDefinitionRequest
     */
    public function createEmailDefinition($body = null)
    {
        list($response) = $this->createEmailDefinitionWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createEmailDefinitionWithHttpInfo
     *
     * createEmailDefinition
     *
     * @param  \SalesForce\MarketingCloud\PHPSDK\Model\CreateEmailDefinitionRequest $body JSON Parameters (optional)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SalesForce\MarketingCloud\PHPSDK\Model\CreateEmailDefinitionRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function createEmailDefinitionWithHttpInfo($body = null)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\CreateEmailDefinitionRequest';
        $request = $this->createEmailDefinitionRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\CreateEmailDefinitionRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createEmailDefinitionAsync
     *
     * createEmailDefinition
     *
     * @param  \SalesForce\MarketingCloud\PHPSDK\Model\CreateEmailDefinitionRequest $body JSON Parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createEmailDefinitionAsync($body = null)
    {
        return $this->createEmailDefinitionAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createEmailDefinitionAsyncWithHttpInfo
     *
     * createEmailDefinition
     *
     * @param  \SalesForce\MarketingCloud\PHPSDK\Model\CreateEmailDefinitionRequest $body JSON Parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createEmailDefinitionAsyncWithHttpInfo($body = null)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\CreateEmailDefinitionRequest';
        $request = $this->createEmailDefinitionRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createEmailDefinition'
     *
     * @param  \SalesForce\MarketingCloud\PHPSDK\Model\CreateEmailDefinitionRequest $body JSON Parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createEmailDefinitionRequest($body = null)
    {

        $resourcePath = '/messaging/v1/email/definitions/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSmsDefinition
     *
     * createSmsDefinition
     *
     * @param  \SalesForce\MarketingCloud\PHPSDK\Model\CreateSmsDefinitionRequest $body JSON Parameters (optional)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SalesForce\MarketingCloud\PHPSDK\Model\CreateSmsDefinitionRequest
     */
    public function createSmsDefinition($body = null)
    {
        list($response) = $this->createSmsDefinitionWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createSmsDefinitionWithHttpInfo
     *
     * createSmsDefinition
     *
     * @param  \SalesForce\MarketingCloud\PHPSDK\Model\CreateSmsDefinitionRequest $body JSON Parameters (optional)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SalesForce\MarketingCloud\PHPSDK\Model\CreateSmsDefinitionRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSmsDefinitionWithHttpInfo($body = null)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\CreateSmsDefinitionRequest';
        $request = $this->createSmsDefinitionRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\CreateSmsDefinitionRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createSmsDefinitionAsync
     *
     * createSmsDefinition
     *
     * @param  \SalesForce\MarketingCloud\PHPSDK\Model\CreateSmsDefinitionRequest $body JSON Parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSmsDefinitionAsync($body = null)
    {
        return $this->createSmsDefinitionAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSmsDefinitionAsyncWithHttpInfo
     *
     * createSmsDefinition
     *
     * @param  \SalesForce\MarketingCloud\PHPSDK\Model\CreateSmsDefinitionRequest $body JSON Parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSmsDefinitionAsyncWithHttpInfo($body = null)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\CreateSmsDefinitionRequest';
        $request = $this->createSmsDefinitionRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSmsDefinition'
     *
     * @param  \SalesForce\MarketingCloud\PHPSDK\Model\CreateSmsDefinitionRequest $body JSON Parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createSmsDefinitionRequest($body = null)
    {

        $resourcePath = '/messaging/v1/sms/definitions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEmailDefinition
     *
     * deleteEmailDefinition
     *
     * @param  string $definition_key Unique identifier of the definition to delete (required)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SalesForce\MarketingCloud\PHPSDK\Model\DeleteSendDefinitionResponse
     */
    public function deleteEmailDefinition($definition_key)
    {
        list($response) = $this->deleteEmailDefinitionWithHttpInfo($definition_key);
        return $response;
    }

    /**
     * Operation deleteEmailDefinitionWithHttpInfo
     *
     * deleteEmailDefinition
     *
     * @param  string $definition_key Unique identifier of the definition to delete (required)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SalesForce\MarketingCloud\PHPSDK\Model\DeleteSendDefinitionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEmailDefinitionWithHttpInfo($definition_key)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\DeleteSendDefinitionResponse';
        $request = $this->deleteEmailDefinitionRequest($definition_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\DeleteSendDefinitionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEmailDefinitionAsync
     *
     * deleteEmailDefinition
     *
     * @param  string $definition_key Unique identifier of the definition to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEmailDefinitionAsync($definition_key)
    {
        return $this->deleteEmailDefinitionAsyncWithHttpInfo($definition_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEmailDefinitionAsyncWithHttpInfo
     *
     * deleteEmailDefinition
     *
     * @param  string $definition_key Unique identifier of the definition to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEmailDefinitionAsyncWithHttpInfo($definition_key)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\DeleteSendDefinitionResponse';
        $request = $this->deleteEmailDefinitionRequest($definition_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEmailDefinition'
     *
     * @param  string $definition_key Unique identifier of the definition to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEmailDefinitionRequest($definition_key)
    {
        // verify the required parameter 'definition_key' is set
        if ($definition_key === null || (is_array($definition_key) && count($definition_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $definition_key when calling deleteEmailDefinition'
            );
        }

        $resourcePath = '/messaging/v1/email/definitions/{definitionKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($definition_key !== null) {
            $resourcePath = str_replace(
                '{' . 'definitionKey' . '}',
                ObjectSerializer::toPathValue($definition_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteQueuedMessagesForEmailDefinition
     *
     * deleteQueuedMessagesForEmailDefinition
     *
     * @param  string $definition_key Unique identifier of the email definition (required)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SalesForce\MarketingCloud\PHPSDK\Model\DeleteQueuedMessagesForSendDefinitionResponse
     */
    public function deleteQueuedMessagesForEmailDefinition($definition_key)
    {
        list($response) = $this->deleteQueuedMessagesForEmailDefinitionWithHttpInfo($definition_key);
        return $response;
    }

    /**
     * Operation deleteQueuedMessagesForEmailDefinitionWithHttpInfo
     *
     * deleteQueuedMessagesForEmailDefinition
     *
     * @param  string $definition_key Unique identifier of the email definition (required)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SalesForce\MarketingCloud\PHPSDK\Model\DeleteQueuedMessagesForSendDefinitionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteQueuedMessagesForEmailDefinitionWithHttpInfo($definition_key)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\DeleteQueuedMessagesForSendDefinitionResponse';
        $request = $this->deleteQueuedMessagesForEmailDefinitionRequest($definition_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\DeleteQueuedMessagesForSendDefinitionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteQueuedMessagesForEmailDefinitionAsync
     *
     * deleteQueuedMessagesForEmailDefinition
     *
     * @param  string $definition_key Unique identifier of the email definition (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteQueuedMessagesForEmailDefinitionAsync($definition_key)
    {
        return $this->deleteQueuedMessagesForEmailDefinitionAsyncWithHttpInfo($definition_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteQueuedMessagesForEmailDefinitionAsyncWithHttpInfo
     *
     * deleteQueuedMessagesForEmailDefinition
     *
     * @param  string $definition_key Unique identifier of the email definition (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteQueuedMessagesForEmailDefinitionAsyncWithHttpInfo($definition_key)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\DeleteQueuedMessagesForSendDefinitionResponse';
        $request = $this->deleteQueuedMessagesForEmailDefinitionRequest($definition_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteQueuedMessagesForEmailDefinition'
     *
     * @param  string $definition_key Unique identifier of the email definition (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteQueuedMessagesForEmailDefinitionRequest($definition_key)
    {
        // verify the required parameter 'definition_key' is set
        if ($definition_key === null || (is_array($definition_key) && count($definition_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $definition_key when calling deleteQueuedMessagesForEmailDefinition'
            );
        }

        $resourcePath = '/messaging/v1/email/definitions/{definitionKey}/queue';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($definition_key !== null) {
            $resourcePath = str_replace(
                '{' . 'definitionKey' . '}',
                ObjectSerializer::toPathValue($definition_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteQueuedMessagesForSmsDefinition
     *
     * deleteQueuedMessagesForSmsDefinition
     *
     * @param  string $definition_key Unique identifier of the SMS definition (required)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SalesForce\MarketingCloud\PHPSDK\Model\DeleteQueuedMessagesForSendDefinitionResponse
     */
    public function deleteQueuedMessagesForSmsDefinition($definition_key)
    {
        list($response) = $this->deleteQueuedMessagesForSmsDefinitionWithHttpInfo($definition_key);
        return $response;
    }

    /**
     * Operation deleteQueuedMessagesForSmsDefinitionWithHttpInfo
     *
     * deleteQueuedMessagesForSmsDefinition
     *
     * @param  string $definition_key Unique identifier of the SMS definition (required)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SalesForce\MarketingCloud\PHPSDK\Model\DeleteQueuedMessagesForSendDefinitionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteQueuedMessagesForSmsDefinitionWithHttpInfo($definition_key)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\DeleteQueuedMessagesForSendDefinitionResponse';
        $request = $this->deleteQueuedMessagesForSmsDefinitionRequest($definition_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\DeleteQueuedMessagesForSendDefinitionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteQueuedMessagesForSmsDefinitionAsync
     *
     * deleteQueuedMessagesForSmsDefinition
     *
     * @param  string $definition_key Unique identifier of the SMS definition (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteQueuedMessagesForSmsDefinitionAsync($definition_key)
    {
        return $this->deleteQueuedMessagesForSmsDefinitionAsyncWithHttpInfo($definition_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteQueuedMessagesForSmsDefinitionAsyncWithHttpInfo
     *
     * deleteQueuedMessagesForSmsDefinition
     *
     * @param  string $definition_key Unique identifier of the SMS definition (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteQueuedMessagesForSmsDefinitionAsyncWithHttpInfo($definition_key)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\DeleteQueuedMessagesForSendDefinitionResponse';
        $request = $this->deleteQueuedMessagesForSmsDefinitionRequest($definition_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteQueuedMessagesForSmsDefinition'
     *
     * @param  string $definition_key Unique identifier of the SMS definition (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteQueuedMessagesForSmsDefinitionRequest($definition_key)
    {
        // verify the required parameter 'definition_key' is set
        if ($definition_key === null || (is_array($definition_key) && count($definition_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $definition_key when calling deleteQueuedMessagesForSmsDefinition'
            );
        }

        $resourcePath = '/messaging/v1/sms/definitions/{definitionKey}/queue';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($definition_key !== null) {
            $resourcePath = str_replace(
                '{' . 'definitionKey' . '}',
                ObjectSerializer::toPathValue($definition_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteSmsDefinition
     *
     * deleteSmsDefinition
     *
     * @param  string $definition_key Unique identifier of the definition to delete (required)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SalesForce\MarketingCloud\PHPSDK\Model\DeleteSendDefinitionResponse
     */
    public function deleteSmsDefinition($definition_key)
    {
        list($response) = $this->deleteSmsDefinitionWithHttpInfo($definition_key);
        return $response;
    }

    /**
     * Operation deleteSmsDefinitionWithHttpInfo
     *
     * deleteSmsDefinition
     *
     * @param  string $definition_key Unique identifier of the definition to delete (required)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SalesForce\MarketingCloud\PHPSDK\Model\DeleteSendDefinitionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSmsDefinitionWithHttpInfo($definition_key)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\DeleteSendDefinitionResponse';
        $request = $this->deleteSmsDefinitionRequest($definition_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\DeleteSendDefinitionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteSmsDefinitionAsync
     *
     * deleteSmsDefinition
     *
     * @param  string $definition_key Unique identifier of the definition to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSmsDefinitionAsync($definition_key)
    {
        return $this->deleteSmsDefinitionAsyncWithHttpInfo($definition_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteSmsDefinitionAsyncWithHttpInfo
     *
     * deleteSmsDefinition
     *
     * @param  string $definition_key Unique identifier of the definition to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSmsDefinitionAsyncWithHttpInfo($definition_key)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\DeleteSendDefinitionResponse';
        $request = $this->deleteSmsDefinitionRequest($definition_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteSmsDefinition'
     *
     * @param  string $definition_key Unique identifier of the definition to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSmsDefinitionRequest($definition_key)
    {
        // verify the required parameter 'definition_key' is set
        if ($definition_key === null || (is_array($definition_key) && count($definition_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $definition_key when calling deleteSmsDefinition'
            );
        }

        $resourcePath = '/messaging/v1/sms/definitions/{definitionKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($definition_key !== null) {
            $resourcePath = str_replace(
                '{' . 'definitionKey' . '}',
                ObjectSerializer::toPathValue($definition_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailDefinition
     *
     * getEmailDefinition
     *
     * @param  string $definition_key Unique identifier of the definition to get (required)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SalesForce\MarketingCloud\PHPSDK\Model\CreateEmailDefinitionRequest
     */
    public function getEmailDefinition($definition_key)
    {
        list($response) = $this->getEmailDefinitionWithHttpInfo($definition_key);
        return $response;
    }

    /**
     * Operation getEmailDefinitionWithHttpInfo
     *
     * getEmailDefinition
     *
     * @param  string $definition_key Unique identifier of the definition to get (required)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SalesForce\MarketingCloud\PHPSDK\Model\CreateEmailDefinitionRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailDefinitionWithHttpInfo($definition_key)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\CreateEmailDefinitionRequest';
        $request = $this->getEmailDefinitionRequest($definition_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\CreateEmailDefinitionRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailDefinitionAsync
     *
     * getEmailDefinition
     *
     * @param  string $definition_key Unique identifier of the definition to get (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailDefinitionAsync($definition_key)
    {
        return $this->getEmailDefinitionAsyncWithHttpInfo($definition_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailDefinitionAsyncWithHttpInfo
     *
     * getEmailDefinition
     *
     * @param  string $definition_key Unique identifier of the definition to get (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailDefinitionAsyncWithHttpInfo($definition_key)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\CreateEmailDefinitionRequest';
        $request = $this->getEmailDefinitionRequest($definition_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailDefinition'
     *
     * @param  string $definition_key Unique identifier of the definition to get (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailDefinitionRequest($definition_key)
    {
        // verify the required parameter 'definition_key' is set
        if ($definition_key === null || (is_array($definition_key) && count($definition_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $definition_key when calling getEmailDefinition'
            );
        }

        $resourcePath = '/messaging/v1/email/definitions/{definitionKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($definition_key !== null) {
            $resourcePath = str_replace(
                '{' . 'definitionKey' . '}',
                ObjectSerializer::toPathValue($definition_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailDefinitions
     *
     * getEmailDefinitions
     *
     * @param  string $status Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)
     * @param  float $page_size Number of definitions, which are array elements, to return per paged response. (optional)
     * @param  float $page Page number to return. (optional)
     * @param  string $order_by Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SalesForce\MarketingCloud\PHPSDK\Model\GetEmailDefinitionsResponse
     */
    public function getEmailDefinitions($status = null, $page_size = null, $page = null, $order_by = null)
    {
        list($response) = $this->getEmailDefinitionsWithHttpInfo($status, $page_size, $page, $order_by);
        return $response;
    }

    /**
     * Operation getEmailDefinitionsWithHttpInfo
     *
     * getEmailDefinitions
     *
     * @param  string $status Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)
     * @param  float $page_size Number of definitions, which are array elements, to return per paged response. (optional)
     * @param  float $page Page number to return. (optional)
     * @param  string $order_by Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SalesForce\MarketingCloud\PHPSDK\Model\GetEmailDefinitionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailDefinitionsWithHttpInfo($status = null, $page_size = null, $page = null, $order_by = null)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\GetEmailDefinitionsResponse';
        $request = $this->getEmailDefinitionsRequest($status, $page_size, $page, $order_by);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\GetEmailDefinitionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailDefinitionsAsync
     *
     * getEmailDefinitions
     *
     * @param  string $status Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)
     * @param  float $page_size Number of definitions, which are array elements, to return per paged response. (optional)
     * @param  float $page Page number to return. (optional)
     * @param  string $order_by Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailDefinitionsAsync($status = null, $page_size = null, $page = null, $order_by = null)
    {
        return $this->getEmailDefinitionsAsyncWithHttpInfo($status, $page_size, $page, $order_by)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailDefinitionsAsyncWithHttpInfo
     *
     * getEmailDefinitions
     *
     * @param  string $status Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)
     * @param  float $page_size Number of definitions, which are array elements, to return per paged response. (optional)
     * @param  float $page Page number to return. (optional)
     * @param  string $order_by Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailDefinitionsAsyncWithHttpInfo($status = null, $page_size = null, $page = null, $order_by = null)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\GetEmailDefinitionsResponse';
        $request = $this->getEmailDefinitionsRequest($status, $page_size, $page, $order_by);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailDefinitions'
     *
     * @param  string $status Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)
     * @param  float $page_size Number of definitions, which are array elements, to return per paged response. (optional)
     * @param  float $page Page number to return. (optional)
     * @param  string $order_by Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailDefinitionsRequest($status = null, $page_size = null, $page = null, $order_by = null)
    {

        $resourcePath = '/messaging/v1/email/definitions/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['orderBy'] = ObjectSerializer::toQueryValue($order_by);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailSendStatusForRecipient
     *
     * getEmailSendStatusForRecipient
     *
     * @param  string $message_key Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide it in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response. (required)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SalesForce\MarketingCloud\PHPSDK\Model\GetDefinitionSendStatusForRecipientResponse
     */
    public function getEmailSendStatusForRecipient($message_key)
    {
        list($response) = $this->getEmailSendStatusForRecipientWithHttpInfo($message_key);
        return $response;
    }

    /**
     * Operation getEmailSendStatusForRecipientWithHttpInfo
     *
     * getEmailSendStatusForRecipient
     *
     * @param  string $message_key Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide it in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response. (required)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SalesForce\MarketingCloud\PHPSDK\Model\GetDefinitionSendStatusForRecipientResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailSendStatusForRecipientWithHttpInfo($message_key)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\GetDefinitionSendStatusForRecipientResponse';
        $request = $this->getEmailSendStatusForRecipientRequest($message_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\GetDefinitionSendStatusForRecipientResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailSendStatusForRecipientAsync
     *
     * getEmailSendStatusForRecipient
     *
     * @param  string $message_key Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide it in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailSendStatusForRecipientAsync($message_key)
    {
        return $this->getEmailSendStatusForRecipientAsyncWithHttpInfo($message_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailSendStatusForRecipientAsyncWithHttpInfo
     *
     * getEmailSendStatusForRecipient
     *
     * @param  string $message_key Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide it in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailSendStatusForRecipientAsyncWithHttpInfo($message_key)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\GetDefinitionSendStatusForRecipientResponse';
        $request = $this->getEmailSendStatusForRecipientRequest($message_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailSendStatusForRecipient'
     *
     * @param  string $message_key Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide it in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailSendStatusForRecipientRequest($message_key)
    {
        // verify the required parameter 'message_key' is set
        if ($message_key === null || (is_array($message_key) && count($message_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_key when calling getEmailSendStatusForRecipient'
            );
        }

        $resourcePath = '/messaging/v1/email/messages/{messageKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($message_key !== null) {
            $resourcePath = str_replace(
                '{' . 'messageKey' . '}',
                ObjectSerializer::toPathValue($message_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmailsNotSentToRecipients
     *
     * getEmailsNotSentToRecipients
     *
     * @param  string $type Only notSent is supported. (required)
     * @param  int $page_size Number of messageKeys (array elements) to return per response page. (optional)
     * @param  int $last_event_id Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SalesForce\MarketingCloud\PHPSDK\Model\GetDefinitionsNotSentToRecipientsResponse
     */
    public function getEmailsNotSentToRecipients($type, $page_size = null, $last_event_id = null)
    {
        list($response) = $this->getEmailsNotSentToRecipientsWithHttpInfo($type, $page_size, $last_event_id);
        return $response;
    }

    /**
     * Operation getEmailsNotSentToRecipientsWithHttpInfo
     *
     * getEmailsNotSentToRecipients
     *
     * @param  string $type Only notSent is supported. (required)
     * @param  int $page_size Number of messageKeys (array elements) to return per response page. (optional)
     * @param  int $last_event_id Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SalesForce\MarketingCloud\PHPSDK\Model\GetDefinitionsNotSentToRecipientsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmailsNotSentToRecipientsWithHttpInfo($type, $page_size = null, $last_event_id = null)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\GetDefinitionsNotSentToRecipientsResponse';
        $request = $this->getEmailsNotSentToRecipientsRequest($type, $page_size, $last_event_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\GetDefinitionsNotSentToRecipientsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEmailsNotSentToRecipientsAsync
     *
     * getEmailsNotSentToRecipients
     *
     * @param  string $type Only notSent is supported. (required)
     * @param  int $page_size Number of messageKeys (array elements) to return per response page. (optional)
     * @param  int $last_event_id Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailsNotSentToRecipientsAsync($type, $page_size = null, $last_event_id = null)
    {
        return $this->getEmailsNotSentToRecipientsAsyncWithHttpInfo($type, $page_size, $last_event_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmailsNotSentToRecipientsAsyncWithHttpInfo
     *
     * getEmailsNotSentToRecipients
     *
     * @param  string $type Only notSent is supported. (required)
     * @param  int $page_size Number of messageKeys (array elements) to return per response page. (optional)
     * @param  int $last_event_id Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmailsNotSentToRecipientsAsyncWithHttpInfo($type, $page_size = null, $last_event_id = null)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\GetDefinitionsNotSentToRecipientsResponse';
        $request = $this->getEmailsNotSentToRecipientsRequest($type, $page_size, $last_event_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmailsNotSentToRecipients'
     *
     * @param  string $type Only notSent is supported. (required)
     * @param  int $page_size Number of messageKeys (array elements) to return per response page. (optional)
     * @param  int $last_event_id Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEmailsNotSentToRecipientsRequest($type, $page_size = null, $last_event_id = null)
    {
        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling getEmailsNotSentToRecipients'
            );
        }

        $resourcePath = '/messaging/v1/email/messages/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['$pageSize'] = ObjectSerializer::toQueryValue($page_size);
        }
        // query params
        if ($last_event_id !== null) {
            $queryParams['lastEventId'] = ObjectSerializer::toQueryValue($last_event_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQueueMetricsForEmailDefinition
     *
     * getQueueMetricsForEmailDefinition
     *
     * @param  string $definition_key Unique identifier of the email definition (required)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SalesForce\MarketingCloud\PHPSDK\Model\GetQueueMetricsForSendDefinitionResponse
     */
    public function getQueueMetricsForEmailDefinition($definition_key)
    {
        list($response) = $this->getQueueMetricsForEmailDefinitionWithHttpInfo($definition_key);
        return $response;
    }

    /**
     * Operation getQueueMetricsForEmailDefinitionWithHttpInfo
     *
     * getQueueMetricsForEmailDefinition
     *
     * @param  string $definition_key Unique identifier of the email definition (required)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SalesForce\MarketingCloud\PHPSDK\Model\GetQueueMetricsForSendDefinitionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQueueMetricsForEmailDefinitionWithHttpInfo($definition_key)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\GetQueueMetricsForSendDefinitionResponse';
        $request = $this->getQueueMetricsForEmailDefinitionRequest($definition_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\GetQueueMetricsForSendDefinitionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQueueMetricsForEmailDefinitionAsync
     *
     * getQueueMetricsForEmailDefinition
     *
     * @param  string $definition_key Unique identifier of the email definition (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQueueMetricsForEmailDefinitionAsync($definition_key)
    {
        return $this->getQueueMetricsForEmailDefinitionAsyncWithHttpInfo($definition_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQueueMetricsForEmailDefinitionAsyncWithHttpInfo
     *
     * getQueueMetricsForEmailDefinition
     *
     * @param  string $definition_key Unique identifier of the email definition (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQueueMetricsForEmailDefinitionAsyncWithHttpInfo($definition_key)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\GetQueueMetricsForSendDefinitionResponse';
        $request = $this->getQueueMetricsForEmailDefinitionRequest($definition_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQueueMetricsForEmailDefinition'
     *
     * @param  string $definition_key Unique identifier of the email definition (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQueueMetricsForEmailDefinitionRequest($definition_key)
    {
        // verify the required parameter 'definition_key' is set
        if ($definition_key === null || (is_array($definition_key) && count($definition_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $definition_key when calling getQueueMetricsForEmailDefinition'
            );
        }

        $resourcePath = '/messaging/v1/email/definitions/{definitionKey}/queue';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($definition_key !== null) {
            $resourcePath = str_replace(
                '{' . 'definitionKey' . '}',
                ObjectSerializer::toPathValue($definition_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQueueMetricsForSmsDefinition
     *
     * getQueueMetricsForSmsDefinition
     *
     * @param  string $definition_key Unique identifier of the SMS definition (required)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SalesForce\MarketingCloud\PHPSDK\Model\GetQueueMetricsForSendDefinitionResponse
     */
    public function getQueueMetricsForSmsDefinition($definition_key)
    {
        list($response) = $this->getQueueMetricsForSmsDefinitionWithHttpInfo($definition_key);
        return $response;
    }

    /**
     * Operation getQueueMetricsForSmsDefinitionWithHttpInfo
     *
     * getQueueMetricsForSmsDefinition
     *
     * @param  string $definition_key Unique identifier of the SMS definition (required)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SalesForce\MarketingCloud\PHPSDK\Model\GetQueueMetricsForSendDefinitionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQueueMetricsForSmsDefinitionWithHttpInfo($definition_key)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\GetQueueMetricsForSendDefinitionResponse';
        $request = $this->getQueueMetricsForSmsDefinitionRequest($definition_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\GetQueueMetricsForSendDefinitionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQueueMetricsForSmsDefinitionAsync
     *
     * getQueueMetricsForSmsDefinition
     *
     * @param  string $definition_key Unique identifier of the SMS definition (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQueueMetricsForSmsDefinitionAsync($definition_key)
    {
        return $this->getQueueMetricsForSmsDefinitionAsyncWithHttpInfo($definition_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQueueMetricsForSmsDefinitionAsyncWithHttpInfo
     *
     * getQueueMetricsForSmsDefinition
     *
     * @param  string $definition_key Unique identifier of the SMS definition (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQueueMetricsForSmsDefinitionAsyncWithHttpInfo($definition_key)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\GetQueueMetricsForSendDefinitionResponse';
        $request = $this->getQueueMetricsForSmsDefinitionRequest($definition_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQueueMetricsForSmsDefinition'
     *
     * @param  string $definition_key Unique identifier of the SMS definition (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQueueMetricsForSmsDefinitionRequest($definition_key)
    {
        // verify the required parameter 'definition_key' is set
        if ($definition_key === null || (is_array($definition_key) && count($definition_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $definition_key when calling getQueueMetricsForSmsDefinition'
            );
        }

        $resourcePath = '/messaging/v1/sms/definitions/{definitionKey}/queue';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($definition_key !== null) {
            $resourcePath = str_replace(
                '{' . 'definitionKey' . '}',
                ObjectSerializer::toPathValue($definition_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSMSsNotSentToRecipients
     *
     * getSMSsNotSentToRecipients
     *
     * @param  string $type Only notSent is supported. (required)
     * @param  int $page_size Number of messageKeys (array elements) to return per response page. (optional)
     * @param  int $last_event_id Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SalesForce\MarketingCloud\PHPSDK\Model\GetDefinitionsNotSentToRecipientsResponse
     */
    public function getSMSsNotSentToRecipients($type, $page_size = null, $last_event_id = null)
    {
        list($response) = $this->getSMSsNotSentToRecipientsWithHttpInfo($type, $page_size, $last_event_id);
        return $response;
    }

    /**
     * Operation getSMSsNotSentToRecipientsWithHttpInfo
     *
     * getSMSsNotSentToRecipients
     *
     * @param  string $type Only notSent is supported. (required)
     * @param  int $page_size Number of messageKeys (array elements) to return per response page. (optional)
     * @param  int $last_event_id Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SalesForce\MarketingCloud\PHPSDK\Model\GetDefinitionsNotSentToRecipientsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSMSsNotSentToRecipientsWithHttpInfo($type, $page_size = null, $last_event_id = null)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\GetDefinitionsNotSentToRecipientsResponse';
        $request = $this->getSMSsNotSentToRecipientsRequest($type, $page_size, $last_event_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\GetDefinitionsNotSentToRecipientsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSMSsNotSentToRecipientsAsync
     *
     * getSMSsNotSentToRecipients
     *
     * @param  string $type Only notSent is supported. (required)
     * @param  int $page_size Number of messageKeys (array elements) to return per response page. (optional)
     * @param  int $last_event_id Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSMSsNotSentToRecipientsAsync($type, $page_size = null, $last_event_id = null)
    {
        return $this->getSMSsNotSentToRecipientsAsyncWithHttpInfo($type, $page_size, $last_event_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSMSsNotSentToRecipientsAsyncWithHttpInfo
     *
     * getSMSsNotSentToRecipients
     *
     * @param  string $type Only notSent is supported. (required)
     * @param  int $page_size Number of messageKeys (array elements) to return per response page. (optional)
     * @param  int $last_event_id Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSMSsNotSentToRecipientsAsyncWithHttpInfo($type, $page_size = null, $last_event_id = null)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\GetDefinitionsNotSentToRecipientsResponse';
        $request = $this->getSMSsNotSentToRecipientsRequest($type, $page_size, $last_event_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSMSsNotSentToRecipients'
     *
     * @param  string $type Only notSent is supported. (required)
     * @param  int $page_size Number of messageKeys (array elements) to return per response page. (optional)
     * @param  int $last_event_id Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSMSsNotSentToRecipientsRequest($type, $page_size = null, $last_event_id = null)
    {
        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling getSMSsNotSentToRecipients'
            );
        }

        $resourcePath = '/messaging/v1/sms/messages/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['$pageSize'] = ObjectSerializer::toQueryValue($page_size);
        }
        // query params
        if ($last_event_id !== null) {
            $queryParams['lastEventId'] = ObjectSerializer::toQueryValue($last_event_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSmsDefinition
     *
     * getSmsDefinition
     *
     * @param  string $definition_key Unique identifier of the definition to get (required)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SalesForce\MarketingCloud\PHPSDK\Model\CreateSmsDefinitionRequest
     */
    public function getSmsDefinition($definition_key)
    {
        list($response) = $this->getSmsDefinitionWithHttpInfo($definition_key);
        return $response;
    }

    /**
     * Operation getSmsDefinitionWithHttpInfo
     *
     * getSmsDefinition
     *
     * @param  string $definition_key Unique identifier of the definition to get (required)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SalesForce\MarketingCloud\PHPSDK\Model\CreateSmsDefinitionRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSmsDefinitionWithHttpInfo($definition_key)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\CreateSmsDefinitionRequest';
        $request = $this->getSmsDefinitionRequest($definition_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\CreateSmsDefinitionRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSmsDefinitionAsync
     *
     * getSmsDefinition
     *
     * @param  string $definition_key Unique identifier of the definition to get (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSmsDefinitionAsync($definition_key)
    {
        return $this->getSmsDefinitionAsyncWithHttpInfo($definition_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSmsDefinitionAsyncWithHttpInfo
     *
     * getSmsDefinition
     *
     * @param  string $definition_key Unique identifier of the definition to get (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSmsDefinitionAsyncWithHttpInfo($definition_key)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\CreateSmsDefinitionRequest';
        $request = $this->getSmsDefinitionRequest($definition_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSmsDefinition'
     *
     * @param  string $definition_key Unique identifier of the definition to get (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSmsDefinitionRequest($definition_key)
    {
        // verify the required parameter 'definition_key' is set
        if ($definition_key === null || (is_array($definition_key) && count($definition_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $definition_key when calling getSmsDefinition'
            );
        }

        $resourcePath = '/messaging/v1/sms/definitions/{definitionKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($definition_key !== null) {
            $resourcePath = str_replace(
                '{' . 'definitionKey' . '}',
                ObjectSerializer::toPathValue($definition_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSmsDefinitions
     *
     * getSmsDefinitions
     *
     * @param  string $status Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)
     * @param  float $page_size Number of definitions, which are array elements, to return per paged response. (optional)
     * @param  float $page Page number to return. (optional)
     * @param  string $order_by Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SalesForce\MarketingCloud\PHPSDK\Model\GetSmsDefinitionsResponse
     */
    public function getSmsDefinitions($status = null, $page_size = null, $page = null, $order_by = null)
    {
        list($response) = $this->getSmsDefinitionsWithHttpInfo($status, $page_size, $page, $order_by);
        return $response;
    }

    /**
     * Operation getSmsDefinitionsWithHttpInfo
     *
     * getSmsDefinitions
     *
     * @param  string $status Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)
     * @param  float $page_size Number of definitions, which are array elements, to return per paged response. (optional)
     * @param  float $page Page number to return. (optional)
     * @param  string $order_by Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SalesForce\MarketingCloud\PHPSDK\Model\GetSmsDefinitionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSmsDefinitionsWithHttpInfo($status = null, $page_size = null, $page = null, $order_by = null)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\GetSmsDefinitionsResponse';
        $request = $this->getSmsDefinitionsRequest($status, $page_size, $page, $order_by);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\GetSmsDefinitionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSmsDefinitionsAsync
     *
     * getSmsDefinitions
     *
     * @param  string $status Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)
     * @param  float $page_size Number of definitions, which are array elements, to return per paged response. (optional)
     * @param  float $page Page number to return. (optional)
     * @param  string $order_by Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSmsDefinitionsAsync($status = null, $page_size = null, $page = null, $order_by = null)
    {
        return $this->getSmsDefinitionsAsyncWithHttpInfo($status, $page_size, $page, $order_by)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSmsDefinitionsAsyncWithHttpInfo
     *
     * getSmsDefinitions
     *
     * @param  string $status Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)
     * @param  float $page_size Number of definitions, which are array elements, to return per paged response. (optional)
     * @param  float $page Page number to return. (optional)
     * @param  string $order_by Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSmsDefinitionsAsyncWithHttpInfo($status = null, $page_size = null, $page = null, $order_by = null)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\GetSmsDefinitionsResponse';
        $request = $this->getSmsDefinitionsRequest($status, $page_size, $page, $order_by);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSmsDefinitions'
     *
     * @param  string $status Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)
     * @param  float $page_size Number of definitions, which are array elements, to return per paged response. (optional)
     * @param  float $page Page number to return. (optional)
     * @param  string $order_by Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSmsDefinitionsRequest($status = null, $page_size = null, $page = null, $order_by = null)
    {

        $resourcePath = '/messaging/v1/sms/definitions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['orderBy'] = ObjectSerializer::toQueryValue($order_by);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSmsSendStatusForRecipient
     *
     * getSmsSendStatusForRecipient
     *
     * @param  string $message_key Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide message key in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response. (required)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SalesForce\MarketingCloud\PHPSDK\Model\GetDefinitionSendStatusForRecipientResponse
     */
    public function getSmsSendStatusForRecipient($message_key)
    {
        list($response) = $this->getSmsSendStatusForRecipientWithHttpInfo($message_key);
        return $response;
    }

    /**
     * Operation getSmsSendStatusForRecipientWithHttpInfo
     *
     * getSmsSendStatusForRecipient
     *
     * @param  string $message_key Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide message key in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response. (required)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SalesForce\MarketingCloud\PHPSDK\Model\GetDefinitionSendStatusForRecipientResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSmsSendStatusForRecipientWithHttpInfo($message_key)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\GetDefinitionSendStatusForRecipientResponse';
        $request = $this->getSmsSendStatusForRecipientRequest($message_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\GetDefinitionSendStatusForRecipientResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSmsSendStatusForRecipientAsync
     *
     * getSmsSendStatusForRecipient
     *
     * @param  string $message_key Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide message key in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSmsSendStatusForRecipientAsync($message_key)
    {
        return $this->getSmsSendStatusForRecipientAsyncWithHttpInfo($message_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSmsSendStatusForRecipientAsyncWithHttpInfo
     *
     * getSmsSendStatusForRecipient
     *
     * @param  string $message_key Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide message key in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSmsSendStatusForRecipientAsyncWithHttpInfo($message_key)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\GetDefinitionSendStatusForRecipientResponse';
        $request = $this->getSmsSendStatusForRecipientRequest($message_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSmsSendStatusForRecipient'
     *
     * @param  string $message_key Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide message key in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSmsSendStatusForRecipientRequest($message_key)
    {
        // verify the required parameter 'message_key' is set
        if ($message_key === null || (is_array($message_key) && count($message_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_key when calling getSmsSendStatusForRecipient'
            );
        }

        $resourcePath = '/messaging/v1/sms/messages/{messageKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($message_key !== null) {
            $resourcePath = str_replace(
                '{' . 'messageKey' . '}',
                ObjectSerializer::toPathValue($message_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation partiallyUpdateEmailDefinition
     *
     * partiallyUpdateEmailDefinition
     *
     * @param  string $definition_key Unique identifier of the definition. (required)
     * @param  \SalesForce\MarketingCloud\PHPSDK\Model\UpdateEmailDefinitionRequest $body JSON Parameters (optional)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SalesForce\MarketingCloud\PHPSDK\Model\CreateEmailDefinitionRequest
     */
    public function partiallyUpdateEmailDefinition($definition_key, $body = null)
    {
        list($response) = $this->partiallyUpdateEmailDefinitionWithHttpInfo($definition_key, $body);
        return $response;
    }

    /**
     * Operation partiallyUpdateEmailDefinitionWithHttpInfo
     *
     * partiallyUpdateEmailDefinition
     *
     * @param  string $definition_key Unique identifier of the definition. (required)
     * @param  \SalesForce\MarketingCloud\PHPSDK\Model\UpdateEmailDefinitionRequest $body JSON Parameters (optional)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SalesForce\MarketingCloud\PHPSDK\Model\CreateEmailDefinitionRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function partiallyUpdateEmailDefinitionWithHttpInfo($definition_key, $body = null)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\CreateEmailDefinitionRequest';
        $request = $this->partiallyUpdateEmailDefinitionRequest($definition_key, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\CreateEmailDefinitionRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation partiallyUpdateEmailDefinitionAsync
     *
     * partiallyUpdateEmailDefinition
     *
     * @param  string $definition_key Unique identifier of the definition. (required)
     * @param  \SalesForce\MarketingCloud\PHPSDK\Model\UpdateEmailDefinitionRequest $body JSON Parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function partiallyUpdateEmailDefinitionAsync($definition_key, $body = null)
    {
        return $this->partiallyUpdateEmailDefinitionAsyncWithHttpInfo($definition_key, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation partiallyUpdateEmailDefinitionAsyncWithHttpInfo
     *
     * partiallyUpdateEmailDefinition
     *
     * @param  string $definition_key Unique identifier of the definition. (required)
     * @param  \SalesForce\MarketingCloud\PHPSDK\Model\UpdateEmailDefinitionRequest $body JSON Parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function partiallyUpdateEmailDefinitionAsyncWithHttpInfo($definition_key, $body = null)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\CreateEmailDefinitionRequest';
        $request = $this->partiallyUpdateEmailDefinitionRequest($definition_key, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'partiallyUpdateEmailDefinition'
     *
     * @param  string $definition_key Unique identifier of the definition. (required)
     * @param  \SalesForce\MarketingCloud\PHPSDK\Model\UpdateEmailDefinitionRequest $body JSON Parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function partiallyUpdateEmailDefinitionRequest($definition_key, $body = null)
    {
        // verify the required parameter 'definition_key' is set
        if ($definition_key === null || (is_array($definition_key) && count($definition_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $definition_key when calling partiallyUpdateEmailDefinition'
            );
        }

        $resourcePath = '/messaging/v1/email/definitions/{definitionKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($definition_key !== null) {
            $resourcePath = str_replace(
                '{' . 'definitionKey' . '}',
                ObjectSerializer::toPathValue($definition_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation partiallyUpdateSmsDefinition
     *
     * partiallyUpdateSmsDefinition
     *
     * @param  string $definition_key Unique identifier of the definition. (required)
     * @param  \SalesForce\MarketingCloud\PHPSDK\Model\UpdateSmsDefinitionRequest $body JSON Parameters (optional)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SalesForce\MarketingCloud\PHPSDK\Model\CreateSmsDefinitionRequest
     */
    public function partiallyUpdateSmsDefinition($definition_key, $body = null)
    {
        list($response) = $this->partiallyUpdateSmsDefinitionWithHttpInfo($definition_key, $body);
        return $response;
    }

    /**
     * Operation partiallyUpdateSmsDefinitionWithHttpInfo
     *
     * partiallyUpdateSmsDefinition
     *
     * @param  string $definition_key Unique identifier of the definition. (required)
     * @param  \SalesForce\MarketingCloud\PHPSDK\Model\UpdateSmsDefinitionRequest $body JSON Parameters (optional)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SalesForce\MarketingCloud\PHPSDK\Model\CreateSmsDefinitionRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function partiallyUpdateSmsDefinitionWithHttpInfo($definition_key, $body = null)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\CreateSmsDefinitionRequest';
        $request = $this->partiallyUpdateSmsDefinitionRequest($definition_key, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\CreateSmsDefinitionRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation partiallyUpdateSmsDefinitionAsync
     *
     * partiallyUpdateSmsDefinition
     *
     * @param  string $definition_key Unique identifier of the definition. (required)
     * @param  \SalesForce\MarketingCloud\PHPSDK\Model\UpdateSmsDefinitionRequest $body JSON Parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function partiallyUpdateSmsDefinitionAsync($definition_key, $body = null)
    {
        return $this->partiallyUpdateSmsDefinitionAsyncWithHttpInfo($definition_key, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation partiallyUpdateSmsDefinitionAsyncWithHttpInfo
     *
     * partiallyUpdateSmsDefinition
     *
     * @param  string $definition_key Unique identifier of the definition. (required)
     * @param  \SalesForce\MarketingCloud\PHPSDK\Model\UpdateSmsDefinitionRequest $body JSON Parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function partiallyUpdateSmsDefinitionAsyncWithHttpInfo($definition_key, $body = null)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\CreateSmsDefinitionRequest';
        $request = $this->partiallyUpdateSmsDefinitionRequest($definition_key, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'partiallyUpdateSmsDefinition'
     *
     * @param  string $definition_key Unique identifier of the definition. (required)
     * @param  \SalesForce\MarketingCloud\PHPSDK\Model\UpdateSmsDefinitionRequest $body JSON Parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function partiallyUpdateSmsDefinitionRequest($definition_key, $body = null)
    {
        // verify the required parameter 'definition_key' is set
        if ($definition_key === null || (is_array($definition_key) && count($definition_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $definition_key when calling partiallyUpdateSmsDefinition'
            );
        }

        $resourcePath = '/messaging/v1/sms/definitions/{definitionKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($definition_key !== null) {
            $resourcePath = str_replace(
                '{' . 'definitionKey' . '}',
                ObjectSerializer::toPathValue($definition_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendEmailToMultipleRecipients
     *
     * sendEmailToMultipleRecipients
     *
     * @param  \SalesForce\MarketingCloud\PHPSDK\Model\SendEmailToMultipleRecipientsRequest $body JSON Parameters (optional)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SalesForce\MarketingCloud\PHPSDK\Model\SendDefinitionToMultipleRecipientsResponse
     */
    public function sendEmailToMultipleRecipients($body = null)
    {
        list($response) = $this->sendEmailToMultipleRecipientsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation sendEmailToMultipleRecipientsWithHttpInfo
     *
     * sendEmailToMultipleRecipients
     *
     * @param  \SalesForce\MarketingCloud\PHPSDK\Model\SendEmailToMultipleRecipientsRequest $body JSON Parameters (optional)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SalesForce\MarketingCloud\PHPSDK\Model\SendDefinitionToMultipleRecipientsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendEmailToMultipleRecipientsWithHttpInfo($body = null)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\SendDefinitionToMultipleRecipientsResponse';
        $request = $this->sendEmailToMultipleRecipientsRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\SendDefinitionToMultipleRecipientsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendEmailToMultipleRecipientsAsync
     *
     * sendEmailToMultipleRecipients
     *
     * @param  \SalesForce\MarketingCloud\PHPSDK\Model\SendEmailToMultipleRecipientsRequest $body JSON Parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendEmailToMultipleRecipientsAsync($body = null)
    {
        return $this->sendEmailToMultipleRecipientsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendEmailToMultipleRecipientsAsyncWithHttpInfo
     *
     * sendEmailToMultipleRecipients
     *
     * @param  \SalesForce\MarketingCloud\PHPSDK\Model\SendEmailToMultipleRecipientsRequest $body JSON Parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendEmailToMultipleRecipientsAsyncWithHttpInfo($body = null)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\SendDefinitionToMultipleRecipientsResponse';
        $request = $this->sendEmailToMultipleRecipientsRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendEmailToMultipleRecipients'
     *
     * @param  \SalesForce\MarketingCloud\PHPSDK\Model\SendEmailToMultipleRecipientsRequest $body JSON Parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendEmailToMultipleRecipientsRequest($body = null)
    {

        $resourcePath = '/messaging/v1/email/messages/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendEmailToSingleRecipient
     *
     * sendEmailToSingleRecipient
     *
     * @param  string $message_key Unique identifier used to track message status. Can be automatically created when you create a message or provided as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected. (required)
     * @param  \SalesForce\MarketingCloud\PHPSDK\Model\SendEmailToSingleRecipientRequest $body JSON Parameters (optional)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SalesForce\MarketingCloud\PHPSDK\Model\SendDefinitionToSingleRecipientResponse
     */
    public function sendEmailToSingleRecipient($message_key, $body = null)
    {
        list($response) = $this->sendEmailToSingleRecipientWithHttpInfo($message_key, $body);
        return $response;
    }

    /**
     * Operation sendEmailToSingleRecipientWithHttpInfo
     *
     * sendEmailToSingleRecipient
     *
     * @param  string $message_key Unique identifier used to track message status. Can be automatically created when you create a message or provided as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected. (required)
     * @param  \SalesForce\MarketingCloud\PHPSDK\Model\SendEmailToSingleRecipientRequest $body JSON Parameters (optional)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SalesForce\MarketingCloud\PHPSDK\Model\SendDefinitionToSingleRecipientResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendEmailToSingleRecipientWithHttpInfo($message_key, $body = null)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\SendDefinitionToSingleRecipientResponse';
        $request = $this->sendEmailToSingleRecipientRequest($message_key, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\SendDefinitionToSingleRecipientResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendEmailToSingleRecipientAsync
     *
     * sendEmailToSingleRecipient
     *
     * @param  string $message_key Unique identifier used to track message status. Can be automatically created when you create a message or provided as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected. (required)
     * @param  \SalesForce\MarketingCloud\PHPSDK\Model\SendEmailToSingleRecipientRequest $body JSON Parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendEmailToSingleRecipientAsync($message_key, $body = null)
    {
        return $this->sendEmailToSingleRecipientAsyncWithHttpInfo($message_key, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendEmailToSingleRecipientAsyncWithHttpInfo
     *
     * sendEmailToSingleRecipient
     *
     * @param  string $message_key Unique identifier used to track message status. Can be automatically created when you create a message or provided as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected. (required)
     * @param  \SalesForce\MarketingCloud\PHPSDK\Model\SendEmailToSingleRecipientRequest $body JSON Parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendEmailToSingleRecipientAsyncWithHttpInfo($message_key, $body = null)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\SendDefinitionToSingleRecipientResponse';
        $request = $this->sendEmailToSingleRecipientRequest($message_key, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendEmailToSingleRecipient'
     *
     * @param  string $message_key Unique identifier used to track message status. Can be automatically created when you create a message or provided as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected. (required)
     * @param  \SalesForce\MarketingCloud\PHPSDK\Model\SendEmailToSingleRecipientRequest $body JSON Parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendEmailToSingleRecipientRequest($message_key, $body = null)
    {
        // verify the required parameter 'message_key' is set
        if ($message_key === null || (is_array($message_key) && count($message_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_key when calling sendEmailToSingleRecipient'
            );
        }

        $resourcePath = '/messaging/v1/email/messages/{messageKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($message_key !== null) {
            $resourcePath = str_replace(
                '{' . 'messageKey' . '}',
                ObjectSerializer::toPathValue($message_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendSmsToMultipleRecipients
     *
     * sendSmsToMultipleRecipients
     *
     * @param  \SalesForce\MarketingCloud\PHPSDK\Model\SendSmsToMultipleRecipientsRequest $body JSON Parameters (optional)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SalesForce\MarketingCloud\PHPSDK\Model\SendDefinitionToMultipleRecipientsResponse
     */
    public function sendSmsToMultipleRecipients($body = null)
    {
        list($response) = $this->sendSmsToMultipleRecipientsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation sendSmsToMultipleRecipientsWithHttpInfo
     *
     * sendSmsToMultipleRecipients
     *
     * @param  \SalesForce\MarketingCloud\PHPSDK\Model\SendSmsToMultipleRecipientsRequest $body JSON Parameters (optional)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SalesForce\MarketingCloud\PHPSDK\Model\SendDefinitionToMultipleRecipientsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendSmsToMultipleRecipientsWithHttpInfo($body = null)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\SendDefinitionToMultipleRecipientsResponse';
        $request = $this->sendSmsToMultipleRecipientsRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\SendDefinitionToMultipleRecipientsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendSmsToMultipleRecipientsAsync
     *
     * sendSmsToMultipleRecipients
     *
     * @param  \SalesForce\MarketingCloud\PHPSDK\Model\SendSmsToMultipleRecipientsRequest $body JSON Parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendSmsToMultipleRecipientsAsync($body = null)
    {
        return $this->sendSmsToMultipleRecipientsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendSmsToMultipleRecipientsAsyncWithHttpInfo
     *
     * sendSmsToMultipleRecipients
     *
     * @param  \SalesForce\MarketingCloud\PHPSDK\Model\SendSmsToMultipleRecipientsRequest $body JSON Parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendSmsToMultipleRecipientsAsyncWithHttpInfo($body = null)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\SendDefinitionToMultipleRecipientsResponse';
        $request = $this->sendSmsToMultipleRecipientsRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendSmsToMultipleRecipients'
     *
     * @param  \SalesForce\MarketingCloud\PHPSDK\Model\SendSmsToMultipleRecipientsRequest $body JSON Parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendSmsToMultipleRecipientsRequest($body = null)
    {

        $resourcePath = '/messaging/v1/sms/messages/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendSmsToSingleRecipient
     *
     * sendSmsToSingleRecipient
     *
     * @param  string $message_key Unique identifier of the definition used to track message status. The messageKey can be created automatically when you create a message, or you can provide it as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected. (required)
     * @param  \SalesForce\MarketingCloud\PHPSDK\Model\SendSmsToSingleRecipientRequest $body JSON Parameters (optional)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SalesForce\MarketingCloud\PHPSDK\Model\SendDefinitionToSingleRecipientResponse
     */
    public function sendSmsToSingleRecipient($message_key, $body = null)
    {
        list($response) = $this->sendSmsToSingleRecipientWithHttpInfo($message_key, $body);
        return $response;
    }

    /**
     * Operation sendSmsToSingleRecipientWithHttpInfo
     *
     * sendSmsToSingleRecipient
     *
     * @param  string $message_key Unique identifier of the definition used to track message status. The messageKey can be created automatically when you create a message, or you can provide it as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected. (required)
     * @param  \SalesForce\MarketingCloud\PHPSDK\Model\SendSmsToSingleRecipientRequest $body JSON Parameters (optional)
     *
     * @throws \SalesForce\MarketingCloud\PHPSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SalesForce\MarketingCloud\PHPSDK\Model\SendDefinitionToSingleRecipientResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendSmsToSingleRecipientWithHttpInfo($message_key, $body = null)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\SendDefinitionToSingleRecipientResponse';
        $request = $this->sendSmsToSingleRecipientRequest($message_key, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\SendDefinitionToSingleRecipientResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\PHPSDK\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendSmsToSingleRecipientAsync
     *
     * sendSmsToSingleRecipient
     *
     * @param  string $message_key Unique identifier of the definition used to track message status. The messageKey can be created automatically when you create a message, or you can provide it as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected. (required)
     * @param  \SalesForce\MarketingCloud\PHPSDK\Model\SendSmsToSingleRecipientRequest $body JSON Parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendSmsToSingleRecipientAsync($message_key, $body = null)
    {
        return $this->sendSmsToSingleRecipientAsyncWithHttpInfo($message_key, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendSmsToSingleRecipientAsyncWithHttpInfo
     *
     * sendSmsToSingleRecipient
     *
     * @param  string $message_key Unique identifier of the definition used to track message status. The messageKey can be created automatically when you create a message, or you can provide it as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected. (required)
     * @param  \SalesForce\MarketingCloud\PHPSDK\Model\SendSmsToSingleRecipientRequest $body JSON Parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendSmsToSingleRecipientAsyncWithHttpInfo($message_key, $body = null)
    {
        $returnType = '\SalesForce\MarketingCloud\PHPSDK\Model\SendDefinitionToSingleRecipientResponse';
        $request = $this->sendSmsToSingleRecipientRequest($message_key, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendSmsToSingleRecipient'
     *
     * @param  string $message_key Unique identifier of the definition used to track message status. The messageKey can be created automatically when you create a message, or you can provide it as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected. (required)
     * @param  \SalesForce\MarketingCloud\PHPSDK\Model\SendSmsToSingleRecipientRequest $body JSON Parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendSmsToSingleRecipientRequest($message_key, $body = null)
    {
        // verify the required parameter 'message_key' is set
        if ($message_key === null || (is_array($message_key) && count($message_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_key when calling sendSmsToSingleRecipient'
            );
        }

        $resourcePath = '/messaging/v1/sms/messages/{messageKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($message_key !== null) {
            $resourcePath = str_replace(
                '{' . 'messageKey' . '}',
                ObjectSerializer::toPathValue($message_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
