<?php
/**
 * CreateEmailDefinitionSubscriptions
 *
 * PHP version 5
 *
 * @category Class
 * @package  SalesForce\MarketingCloud\PHPSDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing Cloud REST API
 *
 * Marketing Cloud's REST API is our newest API. It supports multi-channel use cases, is much more lightweight and easy to use than our SOAP API, and is getting more comprehensive with every release.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mc_sdk@salesforce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.7
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SalesForce\MarketingCloud\PHPSDK\Model;

use \ArrayAccess;
use \SalesForce\MarketingCloud\PHPSDK\ObjectSerializer;

/**
 * CreateEmailDefinitionSubscriptions Class Doc Comment
 *
 * @category Class
 * @package  SalesForce\MarketingCloud\PHPSDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateEmailDefinitionSubscriptions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateEmailDefinitionSubscriptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'list' => 'string',
        'data_extension' => 'string',
        'auto_add_subscriber' => 'bool',
        'update_subscriber' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'list' => null,
        'data_extension' => null,
        'auto_add_subscriber' => null,
        'update_subscriber' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'list' => 'list',
        'data_extension' => 'dataExtension',
        'auto_add_subscriber' => 'autoAddSubscriber',
        'update_subscriber' => 'updateSubscriber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'list' => 'setList',
        'data_extension' => 'setDataExtension',
        'auto_add_subscriber' => 'setAutoAddSubscriber',
        'update_subscriber' => 'setUpdateSubscriber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'list' => 'getList',
        'data_extension' => 'getDataExtension',
        'auto_add_subscriber' => 'getAutoAddSubscriber',
        'update_subscriber' => 'getUpdateSubscriber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['list'] = isset($data['list']) ? $data['list'] : null;
        $this->container['data_extension'] = isset($data['data_extension']) ? $data['data_extension'] : null;
        $this->container['auto_add_subscriber'] = isset($data['auto_add_subscriber']) ? $data['auto_add_subscriber'] : true;
        $this->container['update_subscriber'] = isset($data['update_subscriber']) ? $data['update_subscriber'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['list'] === null) {
            $invalidProperties[] = "'list' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets list
     *
     * @return string
     */
    public function getList()
    {
        return $this->container['list'];
    }

    /**
     * Sets list
     *
     * @param string $list Marketing Cloud external key of the list or all subscribers. Contains the subscriber keys and profile attributes.
     *
     * @return $this
     */
    public function setList($list)
    {
        $this->container['list'] = $list;

        return $this;
    }

    /**
     * Gets data_extension
     *
     * @return string
     */
    public function getDataExtension()
    {
        return $this->container['data_extension'];
    }

    /**
     * Sets data_extension
     *
     * @param string $data_extension Marketing Cloud external key of the triggered send data extension. Each request inserts as a new row in the data extension.
     *
     * @return $this
     */
    public function setDataExtension($data_extension)
    {
        $this->container['data_extension'] = $data_extension;

        return $this;
    }

    /**
     * Gets auto_add_subscriber
     *
     * @return bool
     */
    public function getAutoAddSubscriber()
    {
        return $this->container['auto_add_subscriber'];
    }

    /**
     * Sets auto_add_subscriber
     *
     * @param bool $auto_add_subscriber Adds the recipient’s email address and contact key as a subscriber key to subscriptions.list. Default is true.
     *
     * @return $this
     */
    public function setAutoAddSubscriber($auto_add_subscriber)
    {
        $this->container['auto_add_subscriber'] = $auto_add_subscriber;

        return $this;
    }

    /**
     * Gets update_subscriber
     *
     * @return bool
     */
    public function getUpdateSubscriber()
    {
        return $this->container['update_subscriber'];
    }

    /**
     * Sets update_subscriber
     *
     * @param bool $update_subscriber Updates the recipient’s contact key as a subscriber key with the provided email address and profile attributes to subscriptions.list. Default is true.
     *
     * @return $this
     */
    public function setUpdateSubscriber($update_subscriber)
    {
        $this->container['update_subscriber'] = $update_subscriber;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


